/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class SupplementaryServices implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private ServiceType serviceType = null;
	private ServiceMode serviceMode = null;
	private NumberOfDiversions numberOfDiversions = null;
	private AssociatedPartyAddress associatedPartyAddress = null;
	private ServiceID serviceID = null;
	private ChangeTime changeTime = null;
	private NumberOfParticipants numberOfParticipants = null;
	private ParticipantActionType participantActionType = null;
	private CUGInformation cUGInformation = null;
	
	public SupplementaryServices() {
	}

	public SupplementaryServices(byte[] code) {
		this.code = code;
	}

	public void setServiceType(ServiceType serviceType) {
		this.serviceType = serviceType;
	}

	public ServiceType getServiceType() {
		return serviceType;
	}

	public void setServiceMode(ServiceMode serviceMode) {
		this.serviceMode = serviceMode;
	}

	public ServiceMode getServiceMode() {
		return serviceMode;
	}

	public void setNumberOfDiversions(NumberOfDiversions numberOfDiversions) {
		this.numberOfDiversions = numberOfDiversions;
	}

	public NumberOfDiversions getNumberOfDiversions() {
		return numberOfDiversions;
	}

	public void setAssociatedPartyAddress(AssociatedPartyAddress associatedPartyAddress) {
		this.associatedPartyAddress = associatedPartyAddress;
	}

	public AssociatedPartyAddress getAssociatedPartyAddress() {
		return associatedPartyAddress;
	}

	public void setServiceID(ServiceID serviceID) {
		this.serviceID = serviceID;
	}

	public ServiceID getServiceID() {
		return serviceID;
	}

	public void setChangeTime(ChangeTime changeTime) {
		this.changeTime = changeTime;
	}

	public ChangeTime getChangeTime() {
		return changeTime;
	}

	public void setNumberOfParticipants(NumberOfParticipants numberOfParticipants) {
		this.numberOfParticipants = numberOfParticipants;
	}

	public NumberOfParticipants getNumberOfParticipants() {
		return numberOfParticipants;
	}

	public void setParticipantActionType(ParticipantActionType participantActionType) {
		this.participantActionType = participantActionType;
	}

	public ParticipantActionType getParticipantActionType() {
		return participantActionType;
	}

	public void setCUGInformation(CUGInformation cUGInformation) {
		this.cUGInformation = cUGInformation;
	}

	public CUGInformation getCUGInformation() {
		return cUGInformation;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (cUGInformation != null) {
			codeLength += cUGInformation.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
		}
		
		if (participantActionType != null) {
			codeLength += participantActionType.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			os.write(0x87);
			codeLength += 1;
		}
		
		if (numberOfParticipants != null) {
			codeLength += numberOfParticipants.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			os.write(0x86);
			codeLength += 1;
		}
		
		if (changeTime != null) {
			codeLength += changeTime.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			os.write(0x85);
			codeLength += 1;
		}
		
		if (serviceID != null) {
			codeLength += serviceID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		if (associatedPartyAddress != null) {
			codeLength += associatedPartyAddress.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
		}
		
		if (numberOfDiversions != null) {
			codeLength += numberOfDiversions.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		if (serviceMode != null) {
			codeLength += serviceMode.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
		}
		
		if (serviceType != null) {
			codeLength += serviceType.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			os.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			serviceType = new ServiceType();
			subCodeLength += serviceType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			serviceMode = new ServiceMode();
			subCodeLength += serviceMode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			numberOfDiversions = new NumberOfDiversions();
			subCodeLength += numberOfDiversions.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			associatedPartyAddress = new AssociatedPartyAddress();
			subCodeLength += associatedPartyAddress.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			serviceID = new ServiceID();
			subCodeLength += serviceID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			changeTime = new ChangeTime();
			subCodeLength += changeTime.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			numberOfParticipants = new NumberOfParticipants();
			subCodeLength += numberOfParticipants.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			participantActionType = new ParticipantActionType();
			subCodeLength += participantActionType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			cUGInformation = new CUGInformation();
			subCodeLength += cUGInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (serviceType != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceType: ").append(serviceType);
			firstSelectedElement = false;
		}
		
		if (serviceMode != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceMode: ").append(serviceMode);
			firstSelectedElement = false;
		}
		
		if (numberOfDiversions != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("numberOfDiversions: ").append(numberOfDiversions);
			firstSelectedElement = false;
		}
		
		if (associatedPartyAddress != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("associatedPartyAddress: ").append(associatedPartyAddress);
			firstSelectedElement = false;
		}
		
		if (serviceID != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceID: ").append(serviceID);
			firstSelectedElement = false;
		}
		
		if (changeTime != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("changeTime: ").append(changeTime);
			firstSelectedElement = false;
		}
		
		if (numberOfParticipants != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("numberOfParticipants: ").append(numberOfParticipants);
			firstSelectedElement = false;
		}
		
		if (participantActionType != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("participantActionType: ").append(participantActionType);
			firstSelectedElement = false;
		}
		
		if (cUGInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cUGInformation: ").append(cUGInformation);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

