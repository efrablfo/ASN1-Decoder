/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class OnlineCreditControlRecord implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class ServedSubscriptionID implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<SubscriptionID> seqOf = null;

		public ServedSubscriptionID() {
			seqOf = new ArrayList<SubscriptionID>();
		}

		public ServedSubscriptionID(byte[] code) {
			this.code = code;
		}

		public List<SubscriptionID> getSubscriptionID() {
			if (seqOf == null) {
				seqOf = new ArrayList<SubscriptionID>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SubscriptionID element = new SubscriptionID();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SubscriptionID> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class CreditControlRecords implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<SDPCreditControlRecord> seqOf = null;

		public CreditControlRecords() {
			seqOf = new ArrayList<SDPCreditControlRecord>();
		}

		public CreditControlRecords(byte[] code) {
			this.code = code;
		}

		public List<SDPCreditControlRecord> getSDPCreditControlRecord() {
			if (seqOf == null) {
				seqOf = new ArrayList<SDPCreditControlRecord>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SDPCreditControlRecord element = new SDPCreditControlRecord();
				subCodeLength += element.decode(is, null);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SDPCreditControlRecord> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class AuthorizedQoS implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<chargingcdr.AuthorizedQoS> seqOf = null;

		public AuthorizedQoS() {
			seqOf = new ArrayList<chargingcdr.AuthorizedQoS>();
		}

		public AuthorizedQoS(byte[] code) {
			this.code = code;
		}

		public List<chargingcdr.AuthorizedQoS> getAuthorizedQoS() {
			if (seqOf == null) {
				seqOf = new ArrayList<chargingcdr.AuthorizedQoS>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				chargingcdr.AuthorizedQoS element = new chargingcdr.AuthorizedQoS();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<chargingcdr.AuthorizedQoS> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class AuthorizedChargingRules implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<chargingcdr.AuthorizedChargingRules> seqOf = null;

		public AuthorizedChargingRules() {
			seqOf = new ArrayList<chargingcdr.AuthorizedChargingRules>();
		}

		public AuthorizedChargingRules(byte[] code) {
			this.code = code;
		}

		public List<chargingcdr.AuthorizedChargingRules> getAuthorizedChargingRules() {
			if (seqOf == null) {
				seqOf = new ArrayList<chargingcdr.AuthorizedChargingRules>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				chargingcdr.AuthorizedChargingRules element = new chargingcdr.AuthorizedChargingRules();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<chargingcdr.AuthorizedChargingRules> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class RelatedICIDs implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<RelatedICID> seqOf = null;

		public RelatedICIDs() {
			seqOf = new ArrayList<RelatedICID>();
		}

		public RelatedICIDs(byte[] code) {
			this.code = code;
		}

		public List<RelatedICID> getRelatedICID() {
			if (seqOf == null) {
				seqOf = new ArrayList<RelatedICID>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				RelatedICID element = new RelatedICID();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<RelatedICID> it = seqOf.iterator();
				if (it.hasNext()) {
					sb.append(it.next());
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						sb.append(it.next());
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class OrigServedSubscriptionID implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<SubscriptionID> seqOf = null;

		public OrigServedSubscriptionID() {
			seqOf = new ArrayList<SubscriptionID>();
		}

		public OrigServedSubscriptionID(byte[] code) {
			this.code = code;
		}

		public List<SubscriptionID> getSubscriptionID() {
			if (seqOf == null) {
				seqOf = new ArrayList<SubscriptionID>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SubscriptionID element = new SubscriptionID();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SubscriptionID> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class SupplementaryService implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<SupplementaryServices> seqOf = null;

		public SupplementaryService() {
			seqOf = new ArrayList<SupplementaryServices>();
		}

		public SupplementaryService(byte[] code) {
			this.code = code;
		}

		public List<SupplementaryServices> getSupplementaryServices() {
			if (seqOf == null) {
				seqOf = new ArrayList<SupplementaryServices>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SupplementaryServices element = new SupplementaryServices();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SupplementaryServices> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private Unsigned32 resultCode = null;
	private Unsigned32 resultCodeExtension = null;
	private TimeStamp triggerTime = null;
	private BerUTF8String nodeName = null;
	private BerUTF8String serviceContextID = null;
	private ChargingContext chargingContextID = null;
	private BerUTF8String serviceSessionID = null;
	private RecordIdentificationNumber recordIdentificationNumber = null;
	private BerInteger partialSequenceNumber = null;
	private BerBoolean lastPartialOutput = null;
	private ServedSubscriptionID servedSubscriptionID = null;
	private CorrelationID correlationID = null;
	private ServingElement servingElement = null;
	private CreditControlRecords creditControlRecords = null;
	private UsedServiceUnits usedUnchargedServiceUnits = null;
	private AddressString originalCalledPartyNumber = null;
	private UsedServiceUnits chargedDuration = null;
	private BerOctetString usedStartPulses = null;
	private BerUTF8String nonServedSubscriptionID = null;
	private AuthorizedQoS authorizedQoS = null;
	private AddressString firstCallInfo = null;
	private ChargingSuppressionAtForwarding chargingSuppressionAtForwarding = null;
	private IMEI iMEI = null;
	private TrunkInformation trunkInformation = null;
	private AuthorizedChargingRules authorizedChargingRules = null;
	private IMSChargingIdentifier iMSChargingIdentifier = null;
	private OutgoingSessionId outgoingSessionId = null;
	private UserSessionID userSessionID = null;
	private CauseCode causeCode = null;
	private CreditControlFailureHandling creditControlFailureHandling = null;
	private AccessPointName accessPointName = null;
	private DataVolume dataVolume = null;
	private BerUTF8String receivedshortcodeNumber = null;
	private RelatedICIDs relatedICIDs = null;
	private AddressString redirectedPartyNumber = null;
	private OrigServedSubscriptionID origServedSubscriptionID = null;
	private CallAttemptElapsedTimeValue callAttemptElapsedTimeValue = null;
	private LocationAreaCode locationAreaCode = null;
	private MCC mCC = null;
	private MNC mNC = null;
	private ReleaseCauseCode releaseCauseCode = null;
	private BerBoolean incomingAccessCapv4 = null;
	private ServiceScenario serviceScenario = null;
	private RoamingPosition roamingPosition = null;
	private ServiceExtension serviceExtension = null;
	private SupplementaryService supplementaryService = null;
	private BerOctetString sdpRealm = null;
	
	public OnlineCreditControlRecord() {
	}

	public OnlineCreditControlRecord(byte[] code) {
		this.code = code;
	}

	public void setResultCode(Unsigned32 resultCode) {
		this.resultCode = resultCode;
	}

	public Unsigned32 getResultCode() {
		return resultCode;
	}

	public void setResultCodeExtension(Unsigned32 resultCodeExtension) {
		this.resultCodeExtension = resultCodeExtension;
	}

	public Unsigned32 getResultCodeExtension() {
		return resultCodeExtension;
	}

	public void setTriggerTime(TimeStamp triggerTime) {
		this.triggerTime = triggerTime;
	}

	public TimeStamp getTriggerTime() {
		return triggerTime;
	}

	public void setNodeName(BerUTF8String nodeName) {
		this.nodeName = nodeName;
	}

	public BerUTF8String getNodeName() {
		return nodeName;
	}

	public void setServiceContextID(BerUTF8String serviceContextID) {
		this.serviceContextID = serviceContextID;
	}

	public BerUTF8String getServiceContextID() {
		return serviceContextID;
	}

	public void setChargingContextID(ChargingContext chargingContextID) {
		this.chargingContextID = chargingContextID;
	}

	public ChargingContext getChargingContextID() {
		return chargingContextID;
	}

	public void setServiceSessionID(BerUTF8String serviceSessionID) {
		this.serviceSessionID = serviceSessionID;
	}

	public BerUTF8String getServiceSessionID() {
		return serviceSessionID;
	}

	public void setRecordIdentificationNumber(RecordIdentificationNumber recordIdentificationNumber) {
		this.recordIdentificationNumber = recordIdentificationNumber;
	}

	public RecordIdentificationNumber getRecordIdentificationNumber() {
		return recordIdentificationNumber;
	}

	public void setPartialSequenceNumber(BerInteger partialSequenceNumber) {
		this.partialSequenceNumber = partialSequenceNumber;
	}

	public BerInteger getPartialSequenceNumber() {
		return partialSequenceNumber;
	}

	public void setLastPartialOutput(BerBoolean lastPartialOutput) {
		this.lastPartialOutput = lastPartialOutput;
	}

	public BerBoolean getLastPartialOutput() {
		return lastPartialOutput;
	}

	public void setServedSubscriptionID(ServedSubscriptionID servedSubscriptionID) {
		this.servedSubscriptionID = servedSubscriptionID;
	}

	public ServedSubscriptionID getServedSubscriptionID() {
		return servedSubscriptionID;
	}

	public void setCorrelationID(CorrelationID correlationID) {
		this.correlationID = correlationID;
	}

	public CorrelationID getCorrelationID() {
		return correlationID;
	}

	public void setServingElement(ServingElement servingElement) {
		this.servingElement = servingElement;
	}

	public ServingElement getServingElement() {
		return servingElement;
	}

	public void setCreditControlRecords(CreditControlRecords creditControlRecords) {
		this.creditControlRecords = creditControlRecords;
	}

	public CreditControlRecords getCreditControlRecords() {
		return creditControlRecords;
	}

	public void setUsedUnchargedServiceUnits(UsedServiceUnits usedUnchargedServiceUnits) {
		this.usedUnchargedServiceUnits = usedUnchargedServiceUnits;
	}

	public UsedServiceUnits getUsedUnchargedServiceUnits() {
		return usedUnchargedServiceUnits;
	}

	public void setOriginalCalledPartyNumber(AddressString originalCalledPartyNumber) {
		this.originalCalledPartyNumber = originalCalledPartyNumber;
	}

	public AddressString getOriginalCalledPartyNumber() {
		return originalCalledPartyNumber;
	}

	public void setChargedDuration(UsedServiceUnits chargedDuration) {
		this.chargedDuration = chargedDuration;
	}

	public UsedServiceUnits getChargedDuration() {
		return chargedDuration;
	}

	public void setUsedStartPulses(BerOctetString usedStartPulses) {
		this.usedStartPulses = usedStartPulses;
	}

	public BerOctetString getUsedStartPulses() {
		return usedStartPulses;
	}

	public void setNonServedSubscriptionID(BerUTF8String nonServedSubscriptionID) {
		this.nonServedSubscriptionID = nonServedSubscriptionID;
	}

	public BerUTF8String getNonServedSubscriptionID() {
		return nonServedSubscriptionID;
	}

	public void setAuthorizedQoS(AuthorizedQoS authorizedQoS) {
		this.authorizedQoS = authorizedQoS;
	}

	public AuthorizedQoS getAuthorizedQoS() {
		return authorizedQoS;
	}

	public void setFirstCallInfo(AddressString firstCallInfo) {
		this.firstCallInfo = firstCallInfo;
	}

	public AddressString getFirstCallInfo() {
		return firstCallInfo;
	}

	public void setChargingSuppressionAtForwarding(ChargingSuppressionAtForwarding chargingSuppressionAtForwarding) {
		this.chargingSuppressionAtForwarding = chargingSuppressionAtForwarding;
	}

	public ChargingSuppressionAtForwarding getChargingSuppressionAtForwarding() {
		return chargingSuppressionAtForwarding;
	}

	public void setIMEI(IMEI iMEI) {
		this.iMEI = iMEI;
	}

	public IMEI getIMEI() {
		return iMEI;
	}

	public void setTrunkInformation(TrunkInformation trunkInformation) {
		this.trunkInformation = trunkInformation;
	}

	public TrunkInformation getTrunkInformation() {
		return trunkInformation;
	}

	public void setAuthorizedChargingRules(AuthorizedChargingRules authorizedChargingRules) {
		this.authorizedChargingRules = authorizedChargingRules;
	}

	public AuthorizedChargingRules getAuthorizedChargingRules() {
		return authorizedChargingRules;
	}

	public void setIMSChargingIdentifier(IMSChargingIdentifier iMSChargingIdentifier) {
		this.iMSChargingIdentifier = iMSChargingIdentifier;
	}

	public IMSChargingIdentifier getIMSChargingIdentifier() {
		return iMSChargingIdentifier;
	}

	public void setOutgoingSessionId(OutgoingSessionId outgoingSessionId) {
		this.outgoingSessionId = outgoingSessionId;
	}

	public OutgoingSessionId getOutgoingSessionId() {
		return outgoingSessionId;
	}

	public void setUserSessionID(UserSessionID userSessionID) {
		this.userSessionID = userSessionID;
	}

	public UserSessionID getUserSessionID() {
		return userSessionID;
	}

	public void setCauseCode(CauseCode causeCode) {
		this.causeCode = causeCode;
	}

	public CauseCode getCauseCode() {
		return causeCode;
	}

	public void setCreditControlFailureHandling(CreditControlFailureHandling creditControlFailureHandling) {
		this.creditControlFailureHandling = creditControlFailureHandling;
	}

	public CreditControlFailureHandling getCreditControlFailureHandling() {
		return creditControlFailureHandling;
	}

	public void setAccessPointName(AccessPointName accessPointName) {
		this.accessPointName = accessPointName;
	}

	public AccessPointName getAccessPointName() {
		return accessPointName;
	}

	public void setDataVolume(DataVolume dataVolume) {
		this.dataVolume = dataVolume;
	}

	public DataVolume getDataVolume() {
		return dataVolume;
	}

	public void setReceivedshortcodeNumber(BerUTF8String receivedshortcodeNumber) {
		this.receivedshortcodeNumber = receivedshortcodeNumber;
	}

	public BerUTF8String getReceivedshortcodeNumber() {
		return receivedshortcodeNumber;
	}

	public void setRelatedICIDs(RelatedICIDs relatedICIDs) {
		this.relatedICIDs = relatedICIDs;
	}

	public RelatedICIDs getRelatedICIDs() {
		return relatedICIDs;
	}

	public void setRedirectedPartyNumber(AddressString redirectedPartyNumber) {
		this.redirectedPartyNumber = redirectedPartyNumber;
	}

	public AddressString getRedirectedPartyNumber() {
		return redirectedPartyNumber;
	}

	public void setOrigServedSubscriptionID(OrigServedSubscriptionID origServedSubscriptionID) {
		this.origServedSubscriptionID = origServedSubscriptionID;
	}

	public OrigServedSubscriptionID getOrigServedSubscriptionID() {
		return origServedSubscriptionID;
	}

	public void setCallAttemptElapsedTimeValue(CallAttemptElapsedTimeValue callAttemptElapsedTimeValue) {
		this.callAttemptElapsedTimeValue = callAttemptElapsedTimeValue;
	}

	public CallAttemptElapsedTimeValue getCallAttemptElapsedTimeValue() {
		return callAttemptElapsedTimeValue;
	}

	public void setLocationAreaCode(LocationAreaCode locationAreaCode) {
		this.locationAreaCode = locationAreaCode;
	}

	public LocationAreaCode getLocationAreaCode() {
		return locationAreaCode;
	}

	public void setMCC(MCC mCC) {
		this.mCC = mCC;
	}

	public MCC getMCC() {
		return mCC;
	}

	public void setMNC(MNC mNC) {
		this.mNC = mNC;
	}

	public MNC getMNC() {
		return mNC;
	}

	public void setReleaseCauseCode(ReleaseCauseCode releaseCauseCode) {
		this.releaseCauseCode = releaseCauseCode;
	}

	public ReleaseCauseCode getReleaseCauseCode() {
		return releaseCauseCode;
	}

	public void setIncomingAccessCapv4(BerBoolean incomingAccessCapv4) {
		this.incomingAccessCapv4 = incomingAccessCapv4;
	}

	public BerBoolean getIncomingAccessCapv4() {
		return incomingAccessCapv4;
	}

	public void setServiceScenario(ServiceScenario serviceScenario) {
		this.serviceScenario = serviceScenario;
	}

	public ServiceScenario getServiceScenario() {
		return serviceScenario;
	}

	public void setRoamingPosition(RoamingPosition roamingPosition) {
		this.roamingPosition = roamingPosition;
	}

	public RoamingPosition getRoamingPosition() {
		return roamingPosition;
	}

	public void setServiceExtension(ServiceExtension serviceExtension) {
		this.serviceExtension = serviceExtension;
	}

	public ServiceExtension getServiceExtension() {
		return serviceExtension;
	}

	public void setSupplementaryService(SupplementaryService supplementaryService) {
		this.supplementaryService = supplementaryService;
	}

	public SupplementaryService getSupplementaryService() {
		return supplementaryService;
	}

	public void setSdpRealm(BerOctetString sdpRealm) {
		this.sdpRealm = sdpRealm;
	}

	public BerOctetString getSdpRealm() {
		return sdpRealm;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (sdpRealm != null) {
			codeLength += sdpRealm.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 46
			os.write(0x2E);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (supplementaryService != null) {
			codeLength += supplementaryService.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 45
			os.write(0x2D);
			os.write(0xBF);
			codeLength += 2;
		}
		
		if (serviceExtension != null) {
			codeLength += serviceExtension.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 44
			os.write(0x2C);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (roamingPosition != null) {
			codeLength += roamingPosition.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 43
			os.write(0x2B);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (serviceScenario != null) {
			codeLength += serviceScenario.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 42
			os.write(0x2A);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (incomingAccessCapv4 != null) {
			codeLength += incomingAccessCapv4.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 41
			os.write(0x29);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (releaseCauseCode != null) {
			codeLength += releaseCauseCode.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 40
			os.write(0x28);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (mNC != null) {
			codeLength += mNC.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 39
			os.write(0x27);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (mCC != null) {
			codeLength += mCC.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 38
			os.write(0x26);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (locationAreaCode != null) {
			codeLength += locationAreaCode.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 37
			os.write(0x25);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (callAttemptElapsedTimeValue != null) {
			codeLength += callAttemptElapsedTimeValue.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 36
			os.write(0x24);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (origServedSubscriptionID != null) {
			codeLength += origServedSubscriptionID.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
			os.write(0x23);
			os.write(0xBF);
			codeLength += 2;
		}
		
		if (redirectedPartyNumber != null) {
			codeLength += redirectedPartyNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 34
			os.write(0x22);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (relatedICIDs != null) {
			codeLength += relatedICIDs.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 33
			os.write(0x21);
			os.write(0xBF);
			codeLength += 2;
		}
		
		if (receivedshortcodeNumber != null) {
			codeLength += receivedshortcodeNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 32
			os.write(0x20);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (dataVolume != null) {
			codeLength += dataVolume.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 31
			os.write(0x1F);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (accessPointName != null) {
			codeLength += accessPointName.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 30
			os.write(0x9E);
			codeLength += 1;
		}
		
		if (creditControlFailureHandling != null) {
			codeLength += creditControlFailureHandling.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 29
			os.write(0x9D);
			codeLength += 1;
		}
		
		if (causeCode != null) {
			codeLength += causeCode.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 28
			os.write(0x9C);
			codeLength += 1;
		}
		
		if (userSessionID != null) {
			codeLength += userSessionID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 27
			os.write(0x9B);
			codeLength += 1;
		}
		
		if (outgoingSessionId != null) {
			codeLength += outgoingSessionId.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 26
			os.write(0x9A);
			codeLength += 1;
		}
		
		if (iMSChargingIdentifier != null) {
			codeLength += iMSChargingIdentifier.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 25
			os.write(0x99);
			codeLength += 1;
		}
		
		if (authorizedChargingRules != null) {
			codeLength += authorizedChargingRules.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 24
			os.write(0xB8);
			codeLength += 1;
		}
		
		if (trunkInformation != null) {
			codeLength += trunkInformation.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
			os.write(0xB7);
			codeLength += 1;
		}
		
		if (iMEI != null) {
			codeLength += iMEI.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 22
			os.write(0x96);
			codeLength += 1;
		}
		
		if (chargingSuppressionAtForwarding != null) {
			codeLength += chargingSuppressionAtForwarding.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 21
			os.write(0x95);
			codeLength += 1;
		}
		
		if (firstCallInfo != null) {
			codeLength += firstCallInfo.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 20
			os.write(0x94);
			codeLength += 1;
		}
		
		if (authorizedQoS != null) {
			codeLength += authorizedQoS.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			os.write(0xB3);
			codeLength += 1;
		}
		
		if (nonServedSubscriptionID != null) {
			codeLength += nonServedSubscriptionID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			os.write(0x92);
			codeLength += 1;
		}
		
		if (usedStartPulses != null) {
			codeLength += usedStartPulses.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			os.write(0x91);
			codeLength += 1;
		}
		
		if (chargedDuration != null) {
			codeLength += chargedDuration.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
			os.write(0xB0);
			codeLength += 1;
		}
		
		if (originalCalledPartyNumber != null) {
			codeLength += originalCalledPartyNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			os.write(0x8F);
			codeLength += 1;
		}
		
		if (usedUnchargedServiceUnits != null) {
			codeLength += usedUnchargedServiceUnits.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
			os.write(0xAE);
			codeLength += 1;
		}
		
		if (creditControlRecords != null) {
			codeLength += creditControlRecords.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
			os.write(0xAD);
			codeLength += 1;
		}
		
		if (servingElement != null) {
			sublength = servingElement.encode(os);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			os.write(0xAC);
			codeLength += 1;
		}
		
		if (correlationID != null) {
			sublength = correlationID.encode(os);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			os.write(0xAB);
			codeLength += 1;
		}
		
		if (servedSubscriptionID != null) {
			codeLength += servedSubscriptionID.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			os.write(0xAA);
			codeLength += 1;
		}
		
		if (lastPartialOutput != null) {
			codeLength += lastPartialOutput.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			os.write(0x89);
			codeLength += 1;
		}
		
		if (partialSequenceNumber != null) {
			codeLength += partialSequenceNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
		}
		
		codeLength += recordIdentificationNumber.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 7
		os.write(0x87);
		codeLength += 1;
		
		codeLength += serviceSessionID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		os.write(0x86);
		codeLength += 1;
		
		codeLength += chargingContextID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		os.write(0x85);
		codeLength += 1;
		
		codeLength += serviceContextID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		os.write(0x84);
		codeLength += 1;
		
		codeLength += nodeName.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		os.write(0x83);
		codeLength += 1;
		
		codeLength += triggerTime.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		os.write(0x82);
		codeLength += 1;
		
		if (resultCodeExtension != null) {
			codeLength += resultCodeExtension.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
		}
		
		codeLength += resultCode.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			resultCode = new Unsigned32();
			subCodeLength += resultCode.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			resultCodeExtension = new Unsigned32();
			subCodeLength += resultCodeExtension.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			triggerTime = new TimeStamp();
			subCodeLength += triggerTime.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			nodeName = new BerUTF8String();
			subCodeLength += nodeName.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			serviceContextID = new BerUTF8String();
			subCodeLength += serviceContextID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			chargingContextID = new ChargingContext();
			subCodeLength += chargingContextID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			serviceSessionID = new BerUTF8String();
			subCodeLength += serviceSessionID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			recordIdentificationNumber = new RecordIdentificationNumber();
			subCodeLength += recordIdentificationNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			partialSequenceNumber = new BerInteger();
			subCodeLength += partialSequenceNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			lastPartialOutput = new BerBoolean();
			subCodeLength += lastPartialOutput.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			servedSubscriptionID = new ServedSubscriptionID();
			subCodeLength += servedSubscriptionID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			subCodeLength += length.decode(is);
			correlationID = new CorrelationID();
			subCodeLength += correlationID.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			subCodeLength += length.decode(is);
			servingElement = new ServingElement();
			subCodeLength += servingElement.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			creditControlRecords = new CreditControlRecords();
			subCodeLength += creditControlRecords.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
			usedUnchargedServiceUnits = new UsedServiceUnits();
			subCodeLength += usedUnchargedServiceUnits.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			originalCalledPartyNumber = new AddressString();
			subCodeLength += originalCalledPartyNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
			chargedDuration = new UsedServiceUnits();
			subCodeLength += chargedDuration.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			usedStartPulses = new BerOctetString();
			subCodeLength += usedStartPulses.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
			nonServedSubscriptionID = new BerUTF8String();
			subCodeLength += nonServedSubscriptionID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			authorizedQoS = new AuthorizedQoS();
			subCodeLength += authorizedQoS.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
			firstCallInfo = new AddressString();
			subCodeLength += firstCallInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
			chargingSuppressionAtForwarding = new ChargingSuppressionAtForwarding();
			subCodeLength += chargingSuppressionAtForwarding.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
			iMEI = new IMEI();
			subCodeLength += iMEI.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			trunkInformation = new TrunkInformation();
			subCodeLength += trunkInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 24)) {
			authorizedChargingRules = new AuthorizedChargingRules();
			subCodeLength += authorizedChargingRules.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 25)) {
			iMSChargingIdentifier = new IMSChargingIdentifier();
			subCodeLength += iMSChargingIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 26)) {
			outgoingSessionId = new OutgoingSessionId();
			subCodeLength += outgoingSessionId.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 27)) {
			userSessionID = new UserSessionID();
			subCodeLength += userSessionID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 28)) {
			causeCode = new CauseCode();
			subCodeLength += causeCode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 29)) {
			creditControlFailureHandling = new CreditControlFailureHandling();
			subCodeLength += creditControlFailureHandling.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 30)) {
			accessPointName = new AccessPointName();
			subCodeLength += accessPointName.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
			dataVolume = new DataVolume();
			subCodeLength += dataVolume.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 32)) {
			receivedshortcodeNumber = new BerUTF8String();
			subCodeLength += receivedshortcodeNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 33)) {
			relatedICIDs = new RelatedICIDs();
			subCodeLength += relatedICIDs.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 34)) {
			redirectedPartyNumber = new AddressString();
			subCodeLength += redirectedPartyNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
			origServedSubscriptionID = new OrigServedSubscriptionID();
			subCodeLength += origServedSubscriptionID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 36)) {
			callAttemptElapsedTimeValue = new CallAttemptElapsedTimeValue();
			subCodeLength += callAttemptElapsedTimeValue.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 37)) {
			locationAreaCode = new LocationAreaCode();
			subCodeLength += locationAreaCode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 38)) {
			mCC = new MCC();
			subCodeLength += mCC.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 39)) {
			mNC = new MNC();
			subCodeLength += mNC.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 40)) {
			releaseCauseCode = new ReleaseCauseCode();
			subCodeLength += releaseCauseCode.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 41)) {
			incomingAccessCapv4 = new BerBoolean();
			subCodeLength += incomingAccessCapv4.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 42)) {
			serviceScenario = new ServiceScenario();
			subCodeLength += serviceScenario.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 43)) {
			roamingPosition = new RoamingPosition();
			subCodeLength += roamingPosition.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 44)) {
			serviceExtension = new ServiceExtension();
			subCodeLength += serviceExtension.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 45)) {
			supplementaryService = new SupplementaryService();
			subCodeLength += supplementaryService.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 46)) {
			sdpRealm = new BerOctetString();
			subCodeLength += sdpRealm.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (resultCode != null) {
			sb.append("resultCode: ").append(resultCode);
		}
		else {
			sb.append("resultCode: <empty-required-field>");
		}
		
		if (resultCodeExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("resultCodeExtension: ").append(resultCodeExtension);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (triggerTime != null) {
			sb.append("triggerTime: ").append(triggerTime);
		}
		else {
			sb.append("triggerTime: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (nodeName != null) {
			sb.append("nodeName: ").append(nodeName);
		}
		else {
			sb.append("nodeName: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (serviceContextID != null) {
			sb.append("serviceContextID: ").append(serviceContextID);
		}
		else {
			sb.append("serviceContextID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (chargingContextID != null) {
			sb.append("chargingContextID: ").append(chargingContextID);
		}
		else {
			sb.append("chargingContextID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (serviceSessionID != null) {
			sb.append("serviceSessionID: ").append(serviceSessionID);
		}
		else {
			sb.append("serviceSessionID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (recordIdentificationNumber != null) {
			sb.append("recordIdentificationNumber: ").append(recordIdentificationNumber);
		}
		else {
			sb.append("recordIdentificationNumber: <empty-required-field>");
		}
		
		if (partialSequenceNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("partialSequenceNumber: ").append(partialSequenceNumber);
		}
		
		if (lastPartialOutput != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lastPartialOutput: ").append(lastPartialOutput);
		}
		
		if (servedSubscriptionID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedSubscriptionID: ");
			servedSubscriptionID.appendAsString(sb, indentLevel + 1);
		}
		
		if (correlationID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("correlationID: ");
			correlationID.appendAsString(sb, indentLevel + 1);
		}
		
		if (servingElement != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servingElement: ");
			servingElement.appendAsString(sb, indentLevel + 1);
		}
		
		if (creditControlRecords != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("creditControlRecords: ");
			creditControlRecords.appendAsString(sb, indentLevel + 1);
		}
		
		if (usedUnchargedServiceUnits != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("usedUnchargedServiceUnits: ");
			usedUnchargedServiceUnits.appendAsString(sb, indentLevel + 1);
		}
		
		if (originalCalledPartyNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("originalCalledPartyNumber: ").append(originalCalledPartyNumber);
		}
		
		if (chargedDuration != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargedDuration: ");
			chargedDuration.appendAsString(sb, indentLevel + 1);
		}
		
		if (usedStartPulses != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("usedStartPulses: ").append(usedStartPulses);
		}
		
		if (nonServedSubscriptionID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonServedSubscriptionID: ").append(nonServedSubscriptionID);
		}
		
		if (authorizedQoS != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("authorizedQoS: ");
			authorizedQoS.appendAsString(sb, indentLevel + 1);
		}
		
		if (firstCallInfo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("firstCallInfo: ").append(firstCallInfo);
		}
		
		if (chargingSuppressionAtForwarding != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingSuppressionAtForwarding: ").append(chargingSuppressionAtForwarding);
		}
		
		if (iMEI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("iMEI: ").append(iMEI);
		}
		
		if (trunkInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("trunkInformation: ");
			trunkInformation.appendAsString(sb, indentLevel + 1);
		}
		
		if (authorizedChargingRules != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("authorizedChargingRules: ");
			authorizedChargingRules.appendAsString(sb, indentLevel + 1);
		}
		
		if (iMSChargingIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("iMSChargingIdentifier: ").append(iMSChargingIdentifier);
		}
		
		if (outgoingSessionId != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("outgoingSessionId: ").append(outgoingSessionId);
		}
		
		if (userSessionID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("userSessionID: ").append(userSessionID);
		}
		
		if (causeCode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("causeCode: ").append(causeCode);
		}
		
		if (creditControlFailureHandling != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("creditControlFailureHandling: ").append(creditControlFailureHandling);
		}
		
		if (accessPointName != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accessPointName: ").append(accessPointName);
		}
		
		if (dataVolume != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolume: ").append(dataVolume);
		}
		
		if (receivedshortcodeNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("receivedshortcodeNumber: ").append(receivedshortcodeNumber);
		}
		
		if (relatedICIDs != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("relatedICIDs: ");
			relatedICIDs.appendAsString(sb, indentLevel + 1);
		}
		
		if (redirectedPartyNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("redirectedPartyNumber: ").append(redirectedPartyNumber);
		}
		
		if (origServedSubscriptionID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("origServedSubscriptionID: ");
			origServedSubscriptionID.appendAsString(sb, indentLevel + 1);
		}
		
		if (callAttemptElapsedTimeValue != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callAttemptElapsedTimeValue: ").append(callAttemptElapsedTimeValue);
		}
		
		if (locationAreaCode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("locationAreaCode: ").append(locationAreaCode);
		}
		
		if (mCC != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mCC: ").append(mCC);
		}
		
		if (mNC != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("mNC: ").append(mNC);
		}
		
		if (releaseCauseCode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("releaseCauseCode: ").append(releaseCauseCode);
		}
		
		if (incomingAccessCapv4 != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("incomingAccessCapv4: ").append(incomingAccessCapv4);
		}
		
		if (serviceScenario != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceScenario: ").append(serviceScenario);
		}
		
		if (roamingPosition != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("roamingPosition: ").append(roamingPosition);
		}
		
		if (serviceExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceExtension: ").append(serviceExtension);
		}
		
		if (supplementaryService != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supplementaryService: ");
			supplementaryService.appendAsString(sb, indentLevel + 1);
		}
		
		if (sdpRealm != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("sdpRealm: ").append(sdpRealm);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

