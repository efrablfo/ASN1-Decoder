/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class BonusAdjustment implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class BonusOffers implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<BonusOffer> seqOf = null;

		public BonusOffers() {
			seqOf = new ArrayList<BonusOffer>();
		}

		public BonusOffers(byte[] code) {
			this.code = code;
		}

		public List<BonusOffer> getBonusOffer() {
			if (seqOf == null) {
				seqOf = new ArrayList<BonusOffer>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				BonusOffer element = new BonusOffer();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<BonusOffer> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private MonetaryUnits accountValueBefore = null;
	private MonetaryUnits accountValueAfter = null;
	private MonetaryUnits bonusAmount = null;
	private Accumulators accumulators = null;
	private DedicatedAccounts dedicatedAccounts = null;
	private LifeCycleInformation lifeCycleInformation = null;
	private MonetaryUnits aggregatedValueBefore = null;
	private MonetaryUnits aggregatedValueAfter = null;
	private BonusOffers bonusOffers = null;
	
	public BonusAdjustment() {
	}

	public BonusAdjustment(byte[] code) {
		this.code = code;
	}

	public void setAccountValueBefore(MonetaryUnits accountValueBefore) {
		this.accountValueBefore = accountValueBefore;
	}

	public MonetaryUnits getAccountValueBefore() {
		return accountValueBefore;
	}

	public void setAccountValueAfter(MonetaryUnits accountValueAfter) {
		this.accountValueAfter = accountValueAfter;
	}

	public MonetaryUnits getAccountValueAfter() {
		return accountValueAfter;
	}

	public void setBonusAmount(MonetaryUnits bonusAmount) {
		this.bonusAmount = bonusAmount;
	}

	public MonetaryUnits getBonusAmount() {
		return bonusAmount;
	}

	public void setAccumulators(Accumulators accumulators) {
		this.accumulators = accumulators;
	}

	public Accumulators getAccumulators() {
		return accumulators;
	}

	public void setDedicatedAccounts(DedicatedAccounts dedicatedAccounts) {
		this.dedicatedAccounts = dedicatedAccounts;
	}

	public DedicatedAccounts getDedicatedAccounts() {
		return dedicatedAccounts;
	}

	public void setLifeCycleInformation(LifeCycleInformation lifeCycleInformation) {
		this.lifeCycleInformation = lifeCycleInformation;
	}

	public LifeCycleInformation getLifeCycleInformation() {
		return lifeCycleInformation;
	}

	public void setAggregatedValueBefore(MonetaryUnits aggregatedValueBefore) {
		this.aggregatedValueBefore = aggregatedValueBefore;
	}

	public MonetaryUnits getAggregatedValueBefore() {
		return aggregatedValueBefore;
	}

	public void setAggregatedValueAfter(MonetaryUnits aggregatedValueAfter) {
		this.aggregatedValueAfter = aggregatedValueAfter;
	}

	public MonetaryUnits getAggregatedValueAfter() {
		return aggregatedValueAfter;
	}

	public void setBonusOffers(BonusOffers bonusOffers) {
		this.bonusOffers = bonusOffers;
	}

	public BonusOffers getBonusOffers() {
		return bonusOffers;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (bonusOffers != null) {
			codeLength += bonusOffers.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			os.write(0xA8);
			codeLength += 1;
		}
		
		if (aggregatedValueAfter != null) {
			codeLength += aggregatedValueAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			os.write(0xA7);
			codeLength += 1;
		}
		
		if (aggregatedValueBefore != null) {
			codeLength += aggregatedValueBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			os.write(0xA6);
			codeLength += 1;
		}
		
		if (lifeCycleInformation != null) {
			codeLength += lifeCycleInformation.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			os.write(0xA5);
			codeLength += 1;
		}
		
		if (dedicatedAccounts != null) {
			codeLength += dedicatedAccounts.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			os.write(0xA4);
			codeLength += 1;
		}
		
		if (accumulators != null) {
			codeLength += accumulators.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			os.write(0xA3);
			codeLength += 1;
		}
		
		if (bonusAmount != null) {
			codeLength += bonusAmount.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			os.write(0xA2);
			codeLength += 1;
		}
		
		if (accountValueAfter != null) {
			codeLength += accountValueAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			os.write(0xA1);
			codeLength += 1;
		}
		
		if (accountValueBefore != null) {
			codeLength += accountValueBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			os.write(0xA0);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			accountValueBefore = new MonetaryUnits();
			subCodeLength += accountValueBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			accountValueAfter = new MonetaryUnits();
			subCodeLength += accountValueAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			bonusAmount = new MonetaryUnits();
			subCodeLength += bonusAmount.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			accumulators = new Accumulators();
			subCodeLength += accumulators.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			dedicatedAccounts = new DedicatedAccounts();
			subCodeLength += dedicatedAccounts.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			lifeCycleInformation = new LifeCycleInformation();
			subCodeLength += lifeCycleInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			aggregatedValueBefore = new MonetaryUnits();
			subCodeLength += aggregatedValueBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			aggregatedValueAfter = new MonetaryUnits();
			subCodeLength += aggregatedValueAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			bonusOffers = new BonusOffers();
			subCodeLength += bonusOffers.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (accountValueBefore != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountValueBefore: ");
			accountValueBefore.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (accountValueAfter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountValueAfter: ");
			accountValueAfter.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (bonusAmount != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("bonusAmount: ");
			bonusAmount.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (accumulators != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accumulators: ");
			accumulators.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (dedicatedAccounts != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccounts: ");
			dedicatedAccounts.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (lifeCycleInformation != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("lifeCycleInformation: ");
			lifeCycleInformation.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (aggregatedValueBefore != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aggregatedValueBefore: ");
			aggregatedValueBefore.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (aggregatedValueAfter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aggregatedValueAfter: ");
			aggregatedValueAfter.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (bonusOffers != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("bonusOffers: ");
			bonusOffers.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

