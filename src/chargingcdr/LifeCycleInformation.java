/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class LifeCycleInformation implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private Date supervisionExpDateBefore = null;
	private Date supervisionExpDateAfter = null;
	private Period creditClearancePeriodBefore = null;
	private Period creditClearancePeriodAfter = null;
	private Date servFeeExpDateBefore = null;
	private Date servFeeExpDateAfter = null;
	private Period serviceRemovalPeriodBefore = null;
	private Period serviceRemovalPeriodAfter = null;
	private AccountFlags accountFlagsBefore = null;
	private AccountFlags accountFlagsAfter = null;
	
	public LifeCycleInformation() {
	}

	public LifeCycleInformation(byte[] code) {
		this.code = code;
	}

	public void setSupervisionExpDateBefore(Date supervisionExpDateBefore) {
		this.supervisionExpDateBefore = supervisionExpDateBefore;
	}

	public Date getSupervisionExpDateBefore() {
		return supervisionExpDateBefore;
	}

	public void setSupervisionExpDateAfter(Date supervisionExpDateAfter) {
		this.supervisionExpDateAfter = supervisionExpDateAfter;
	}

	public Date getSupervisionExpDateAfter() {
		return supervisionExpDateAfter;
	}

	public void setCreditClearancePeriodBefore(Period creditClearancePeriodBefore) {
		this.creditClearancePeriodBefore = creditClearancePeriodBefore;
	}

	public Period getCreditClearancePeriodBefore() {
		return creditClearancePeriodBefore;
	}

	public void setCreditClearancePeriodAfter(Period creditClearancePeriodAfter) {
		this.creditClearancePeriodAfter = creditClearancePeriodAfter;
	}

	public Period getCreditClearancePeriodAfter() {
		return creditClearancePeriodAfter;
	}

	public void setServFeeExpDateBefore(Date servFeeExpDateBefore) {
		this.servFeeExpDateBefore = servFeeExpDateBefore;
	}

	public Date getServFeeExpDateBefore() {
		return servFeeExpDateBefore;
	}

	public void setServFeeExpDateAfter(Date servFeeExpDateAfter) {
		this.servFeeExpDateAfter = servFeeExpDateAfter;
	}

	public Date getServFeeExpDateAfter() {
		return servFeeExpDateAfter;
	}

	public void setServiceRemovalPeriodBefore(Period serviceRemovalPeriodBefore) {
		this.serviceRemovalPeriodBefore = serviceRemovalPeriodBefore;
	}

	public Period getServiceRemovalPeriodBefore() {
		return serviceRemovalPeriodBefore;
	}

	public void setServiceRemovalPeriodAfter(Period serviceRemovalPeriodAfter) {
		this.serviceRemovalPeriodAfter = serviceRemovalPeriodAfter;
	}

	public Period getServiceRemovalPeriodAfter() {
		return serviceRemovalPeriodAfter;
	}

	public void setAccountFlagsBefore(AccountFlags accountFlagsBefore) {
		this.accountFlagsBefore = accountFlagsBefore;
	}

	public AccountFlags getAccountFlagsBefore() {
		return accountFlagsBefore;
	}

	public void setAccountFlagsAfter(AccountFlags accountFlagsAfter) {
		this.accountFlagsAfter = accountFlagsAfter;
	}

	public AccountFlags getAccountFlagsAfter() {
		return accountFlagsAfter;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (accountFlagsAfter != null) {
			codeLength += accountFlagsAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			os.write(0x89);
			codeLength += 1;
		}
		
		if (accountFlagsBefore != null) {
			codeLength += accountFlagsBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
		}
		
		if (serviceRemovalPeriodAfter != null) {
			codeLength += serviceRemovalPeriodAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			os.write(0x87);
			codeLength += 1;
		}
		
		if (serviceRemovalPeriodBefore != null) {
			codeLength += serviceRemovalPeriodBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			os.write(0x86);
			codeLength += 1;
		}
		
		if (servFeeExpDateAfter != null) {
			codeLength += servFeeExpDateAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			os.write(0x85);
			codeLength += 1;
		}
		
		if (servFeeExpDateBefore != null) {
			codeLength += servFeeExpDateBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		if (creditClearancePeriodAfter != null) {
			codeLength += creditClearancePeriodAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
		}
		
		if (creditClearancePeriodBefore != null) {
			codeLength += creditClearancePeriodBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		if (supervisionExpDateAfter != null) {
			codeLength += supervisionExpDateAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
		}
		
		if (supervisionExpDateBefore != null) {
			codeLength += supervisionExpDateBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			os.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			supervisionExpDateBefore = new Date();
			subCodeLength += supervisionExpDateBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			supervisionExpDateAfter = new Date();
			subCodeLength += supervisionExpDateAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			creditClearancePeriodBefore = new Period();
			subCodeLength += creditClearancePeriodBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			creditClearancePeriodAfter = new Period();
			subCodeLength += creditClearancePeriodAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			servFeeExpDateBefore = new Date();
			subCodeLength += servFeeExpDateBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			servFeeExpDateAfter = new Date();
			subCodeLength += servFeeExpDateAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			serviceRemovalPeriodBefore = new Period();
			subCodeLength += serviceRemovalPeriodBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			serviceRemovalPeriodAfter = new Period();
			subCodeLength += serviceRemovalPeriodAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			accountFlagsBefore = new AccountFlags();
			subCodeLength += accountFlagsBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			accountFlagsAfter = new AccountFlags();
			subCodeLength += accountFlagsAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (supervisionExpDateBefore != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supervisionExpDateBefore: ").append(supervisionExpDateBefore);
			firstSelectedElement = false;
		}
		
		if (supervisionExpDateAfter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("supervisionExpDateAfter: ").append(supervisionExpDateAfter);
			firstSelectedElement = false;
		}
		
		if (creditClearancePeriodBefore != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("creditClearancePeriodBefore: ").append(creditClearancePeriodBefore);
			firstSelectedElement = false;
		}
		
		if (creditClearancePeriodAfter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("creditClearancePeriodAfter: ").append(creditClearancePeriodAfter);
			firstSelectedElement = false;
		}
		
		if (servFeeExpDateBefore != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servFeeExpDateBefore: ").append(servFeeExpDateBefore);
			firstSelectedElement = false;
		}
		
		if (servFeeExpDateAfter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servFeeExpDateAfter: ").append(servFeeExpDateAfter);
			firstSelectedElement = false;
		}
		
		if (serviceRemovalPeriodBefore != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceRemovalPeriodBefore: ").append(serviceRemovalPeriodBefore);
			firstSelectedElement = false;
		}
		
		if (serviceRemovalPeriodAfter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceRemovalPeriodAfter: ").append(serviceRemovalPeriodAfter);
			firstSelectedElement = false;
		}
		
		if (accountFlagsBefore != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountFlagsBefore: ").append(accountFlagsBefore);
			firstSelectedElement = false;
		}
		
		if (accountFlagsAfter != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountFlagsAfter: ").append(accountFlagsAfter);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

