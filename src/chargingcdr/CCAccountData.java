/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class CCAccountData implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class UsageCounters implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<UsageCounter> seqOf = null;

		public UsageCounters() {
			seqOf = new ArrayList<UsageCounter>();
		}

		public UsageCounters(byte[] code) {
			this.code = code;
		}

		public List<UsageCounter> getUsageCounter() {
			if (seqOf == null) {
				seqOf = new ArrayList<UsageCounter>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				UsageCounter element = new UsageCounter();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<UsageCounter> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private AddressString servedAccount = null;
	private ServiceClassID serviceClassID = null;
	private AccountGroupID accountGroupID = null;
	private MonetaryUnits accountValueBefore = null;
	private MonetaryUnits accountValueAfter = null;
	private CommunityInformation communityInformation = null;
	private Accumulators accumulators = null;
	private DedicatedAccounts dedicatedAccounts = null;
	private FamilyAndFriendsID familyAndFriendsID = null;
	private AddressString familyAndFriendsNo = null;
	private Unsigned32 serviceOfferings = null;
	private MonetaryUnits accumulatedCost = null;
	private MonetaryUnits accountValueUsed = null;
	private MonetaryUnits accountValueDeducted = null;
	private MonetaryUnits aggregatedValueBefore = null;
	private MonetaryUnits aggregatedValueAfter = null;
	private Integer64 accumulatedUnits = null;
	private Integer64 accountUnitsUsed = null;
	private Integer64 accountUnitsDeducted = null;
	private SpecifiedConsumptions specifiedConsumptions = null;
	private UsedOffers usedOffers = null;
	private UsageCounters usageCounters = null;
	private FamilyAndFriendsID providersFamilyAndFriendsID = null;
	private UsedOffersAdditionalInfo usedOffersAdditionalInfo = null;
	private TimeZone accountHomeTimeZone = null;
	
	public CCAccountData() {
	}

	public CCAccountData(byte[] code) {
		this.code = code;
	}

	public void setServedAccount(AddressString servedAccount) {
		this.servedAccount = servedAccount;
	}

	public AddressString getServedAccount() {
		return servedAccount;
	}

	public void setServiceClassID(ServiceClassID serviceClassID) {
		this.serviceClassID = serviceClassID;
	}

	public ServiceClassID getServiceClassID() {
		return serviceClassID;
	}

	public void setAccountGroupID(AccountGroupID accountGroupID) {
		this.accountGroupID = accountGroupID;
	}

	public AccountGroupID getAccountGroupID() {
		return accountGroupID;
	}

	public void setAccountValueBefore(MonetaryUnits accountValueBefore) {
		this.accountValueBefore = accountValueBefore;
	}

	public MonetaryUnits getAccountValueBefore() {
		return accountValueBefore;
	}

	public void setAccountValueAfter(MonetaryUnits accountValueAfter) {
		this.accountValueAfter = accountValueAfter;
	}

	public MonetaryUnits getAccountValueAfter() {
		return accountValueAfter;
	}

	public void setCommunityInformation(CommunityInformation communityInformation) {
		this.communityInformation = communityInformation;
	}

	public CommunityInformation getCommunityInformation() {
		return communityInformation;
	}

	public void setAccumulators(Accumulators accumulators) {
		this.accumulators = accumulators;
	}

	public Accumulators getAccumulators() {
		return accumulators;
	}

	public void setDedicatedAccounts(DedicatedAccounts dedicatedAccounts) {
		this.dedicatedAccounts = dedicatedAccounts;
	}

	public DedicatedAccounts getDedicatedAccounts() {
		return dedicatedAccounts;
	}

	public void setFamilyAndFriendsID(FamilyAndFriendsID familyAndFriendsID) {
		this.familyAndFriendsID = familyAndFriendsID;
	}

	public FamilyAndFriendsID getFamilyAndFriendsID() {
		return familyAndFriendsID;
	}

	public void setFamilyAndFriendsNo(AddressString familyAndFriendsNo) {
		this.familyAndFriendsNo = familyAndFriendsNo;
	}

	public AddressString getFamilyAndFriendsNo() {
		return familyAndFriendsNo;
	}

	public void setServiceOfferings(Unsigned32 serviceOfferings) {
		this.serviceOfferings = serviceOfferings;
	}

	public Unsigned32 getServiceOfferings() {
		return serviceOfferings;
	}

	public void setAccumulatedCost(MonetaryUnits accumulatedCost) {
		this.accumulatedCost = accumulatedCost;
	}

	public MonetaryUnits getAccumulatedCost() {
		return accumulatedCost;
	}

	public void setAccountValueUsed(MonetaryUnits accountValueUsed) {
		this.accountValueUsed = accountValueUsed;
	}

	public MonetaryUnits getAccountValueUsed() {
		return accountValueUsed;
	}

	public void setAccountValueDeducted(MonetaryUnits accountValueDeducted) {
		this.accountValueDeducted = accountValueDeducted;
	}

	public MonetaryUnits getAccountValueDeducted() {
		return accountValueDeducted;
	}

	public void setAggregatedValueBefore(MonetaryUnits aggregatedValueBefore) {
		this.aggregatedValueBefore = aggregatedValueBefore;
	}

	public MonetaryUnits getAggregatedValueBefore() {
		return aggregatedValueBefore;
	}

	public void setAggregatedValueAfter(MonetaryUnits aggregatedValueAfter) {
		this.aggregatedValueAfter = aggregatedValueAfter;
	}

	public MonetaryUnits getAggregatedValueAfter() {
		return aggregatedValueAfter;
	}

	public void setAccumulatedUnits(Integer64 accumulatedUnits) {
		this.accumulatedUnits = accumulatedUnits;
	}

	public Integer64 getAccumulatedUnits() {
		return accumulatedUnits;
	}

	public void setAccountUnitsUsed(Integer64 accountUnitsUsed) {
		this.accountUnitsUsed = accountUnitsUsed;
	}

	public Integer64 getAccountUnitsUsed() {
		return accountUnitsUsed;
	}

	public void setAccountUnitsDeducted(Integer64 accountUnitsDeducted) {
		this.accountUnitsDeducted = accountUnitsDeducted;
	}

	public Integer64 getAccountUnitsDeducted() {
		return accountUnitsDeducted;
	}

	public void setSpecifiedConsumptions(SpecifiedConsumptions specifiedConsumptions) {
		this.specifiedConsumptions = specifiedConsumptions;
	}

	public SpecifiedConsumptions getSpecifiedConsumptions() {
		return specifiedConsumptions;
	}

	public void setUsedOffers(UsedOffers usedOffers) {
		this.usedOffers = usedOffers;
	}

	public UsedOffers getUsedOffers() {
		return usedOffers;
	}

	public void setUsageCounters(UsageCounters usageCounters) {
		this.usageCounters = usageCounters;
	}

	public UsageCounters getUsageCounters() {
		return usageCounters;
	}

	public void setProvidersFamilyAndFriendsID(FamilyAndFriendsID providersFamilyAndFriendsID) {
		this.providersFamilyAndFriendsID = providersFamilyAndFriendsID;
	}

	public FamilyAndFriendsID getProvidersFamilyAndFriendsID() {
		return providersFamilyAndFriendsID;
	}

	public void setUsedOffersAdditionalInfo(UsedOffersAdditionalInfo usedOffersAdditionalInfo) {
		this.usedOffersAdditionalInfo = usedOffersAdditionalInfo;
	}

	public UsedOffersAdditionalInfo getUsedOffersAdditionalInfo() {
		return usedOffersAdditionalInfo;
	}

	public void setAccountHomeTimeZone(TimeZone accountHomeTimeZone) {
		this.accountHomeTimeZone = accountHomeTimeZone;
	}

	public TimeZone getAccountHomeTimeZone() {
		return accountHomeTimeZone;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (accountHomeTimeZone != null) {
			codeLength += accountHomeTimeZone.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 24
			os.write(0x98);
			codeLength += 1;
		}
		
		if (usedOffersAdditionalInfo != null) {
			codeLength += usedOffersAdditionalInfo.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 23
			os.write(0xB7);
			codeLength += 1;
		}
		
		if (providersFamilyAndFriendsID != null) {
			codeLength += providersFamilyAndFriendsID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 22
			os.write(0x96);
			codeLength += 1;
		}
		
		if (usageCounters != null) {
			codeLength += usageCounters.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 21
			os.write(0xB5);
			codeLength += 1;
		}
		
		if (usedOffers != null) {
			codeLength += usedOffers.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			os.write(0xB4);
			codeLength += 1;
		}
		
		if (specifiedConsumptions != null) {
			codeLength += specifiedConsumptions.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			os.write(0xB3);
			codeLength += 1;
		}
		
		if (accountUnitsDeducted != null) {
			codeLength += accountUnitsDeducted.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			os.write(0x92);
			codeLength += 1;
		}
		
		if (accountUnitsUsed != null) {
			codeLength += accountUnitsUsed.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			os.write(0x91);
			codeLength += 1;
		}
		
		if (accumulatedUnits != null) {
			codeLength += accumulatedUnits.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			os.write(0x90);
			codeLength += 1;
		}
		
		if (aggregatedValueAfter != null) {
			codeLength += aggregatedValueAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			os.write(0xAF);
			codeLength += 1;
		}
		
		if (aggregatedValueBefore != null) {
			codeLength += aggregatedValueBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 14
			os.write(0xAE);
			codeLength += 1;
		}
		
		codeLength += accountValueDeducted.encode(os, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 13
		os.write(0xAD);
		codeLength += 1;
		
		if (accountValueUsed != null) {
			codeLength += accountValueUsed.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			os.write(0xAC);
			codeLength += 1;
		}
		
		if (accumulatedCost != null) {
			codeLength += accumulatedCost.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			os.write(0xAB);
			codeLength += 1;
		}
		
		codeLength += serviceOfferings.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 10
		os.write(0x8A);
		codeLength += 1;
		
		if (familyAndFriendsNo != null) {
			codeLength += familyAndFriendsNo.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			os.write(0x89);
			codeLength += 1;
		}
		
		if (familyAndFriendsID != null) {
			codeLength += familyAndFriendsID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
		}
		
		if (dedicatedAccounts != null) {
			codeLength += dedicatedAccounts.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 7
			os.write(0xA7);
			codeLength += 1;
		}
		
		if (accumulators != null) {
			codeLength += accumulators.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			os.write(0xA6);
			codeLength += 1;
		}
		
		if (communityInformation != null) {
			codeLength += communityInformation.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			os.write(0xA5);
			codeLength += 1;
		}
		
		if (accountValueAfter != null) {
			codeLength += accountValueAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			os.write(0xA4);
			codeLength += 1;
		}
		
		if (accountValueBefore != null) {
			codeLength += accountValueBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			os.write(0xA3);
			codeLength += 1;
		}
		
		codeLength += accountGroupID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		os.write(0x82);
		codeLength += 1;
		
		codeLength += serviceClassID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		os.write(0x81);
		codeLength += 1;
		
		codeLength += servedAccount.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			servedAccount = new AddressString();
			subCodeLength += servedAccount.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			serviceClassID = new ServiceClassID();
			subCodeLength += serviceClassID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			accountGroupID = new AccountGroupID();
			subCodeLength += accountGroupID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			accountValueBefore = new MonetaryUnits();
			subCodeLength += accountValueBefore.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			accountValueAfter = new MonetaryUnits();
			subCodeLength += accountValueAfter.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			communityInformation = new CommunityInformation();
			subCodeLength += communityInformation.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			accumulators = new Accumulators();
			subCodeLength += accumulators.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 7)) {
			dedicatedAccounts = new DedicatedAccounts();
			subCodeLength += dedicatedAccounts.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			familyAndFriendsID = new FamilyAndFriendsID();
			subCodeLength += familyAndFriendsID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			familyAndFriendsNo = new AddressString();
			subCodeLength += familyAndFriendsNo.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			serviceOfferings = new Unsigned32();
			subCodeLength += serviceOfferings.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			accumulatedCost = new MonetaryUnits();
			subCodeLength += accumulatedCost.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			accountValueUsed = new MonetaryUnits();
			subCodeLength += accountValueUsed.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 13)) {
			accountValueDeducted = new MonetaryUnits();
			subCodeLength += accountValueDeducted.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 14)) {
			aggregatedValueBefore = new MonetaryUnits();
			subCodeLength += aggregatedValueBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			aggregatedValueAfter = new MonetaryUnits();
			subCodeLength += aggregatedValueAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			accumulatedUnits = new Integer64();
			subCodeLength += accumulatedUnits.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			accountUnitsUsed = new Integer64();
			subCodeLength += accountUnitsUsed.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
			accountUnitsDeducted = new Integer64();
			subCodeLength += accountUnitsDeducted.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			specifiedConsumptions = new SpecifiedConsumptions();
			subCodeLength += specifiedConsumptions.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			usedOffers = new UsedOffers();
			subCodeLength += usedOffers.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 21)) {
			usageCounters = new UsageCounters();
			subCodeLength += usageCounters.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
			providersFamilyAndFriendsID = new FamilyAndFriendsID();
			subCodeLength += providersFamilyAndFriendsID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 23)) {
			usedOffersAdditionalInfo = new UsedOffersAdditionalInfo();
			subCodeLength += usedOffersAdditionalInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
			accountHomeTimeZone = new TimeZone();
			subCodeLength += accountHomeTimeZone.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (servedAccount != null) {
			sb.append("servedAccount: ").append(servedAccount);
		}
		else {
			sb.append("servedAccount: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (serviceClassID != null) {
			sb.append("serviceClassID: ").append(serviceClassID);
		}
		else {
			sb.append("serviceClassID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accountGroupID != null) {
			sb.append("accountGroupID: ").append(accountGroupID);
		}
		else {
			sb.append("accountGroupID: <empty-required-field>");
		}
		
		if (accountValueBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountValueBefore: ");
			accountValueBefore.appendAsString(sb, indentLevel + 1);
		}
		
		if (accountValueAfter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountValueAfter: ");
			accountValueAfter.appendAsString(sb, indentLevel + 1);
		}
		
		if (communityInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("communityInformation: ");
			communityInformation.appendAsString(sb, indentLevel + 1);
		}
		
		if (accumulators != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accumulators: ");
			accumulators.appendAsString(sb, indentLevel + 1);
		}
		
		if (dedicatedAccounts != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccounts: ");
			dedicatedAccounts.appendAsString(sb, indentLevel + 1);
		}
		
		if (familyAndFriendsID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("familyAndFriendsID: ").append(familyAndFriendsID);
		}
		
		if (familyAndFriendsNo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("familyAndFriendsNo: ").append(familyAndFriendsNo);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (serviceOfferings != null) {
			sb.append("serviceOfferings: ").append(serviceOfferings);
		}
		else {
			sb.append("serviceOfferings: <empty-required-field>");
		}
		
		if (accumulatedCost != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accumulatedCost: ");
			accumulatedCost.appendAsString(sb, indentLevel + 1);
		}
		
		if (accountValueUsed != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountValueUsed: ");
			accountValueUsed.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accountValueDeducted != null) {
			sb.append("accountValueDeducted: ");
			accountValueDeducted.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("accountValueDeducted: <empty-required-field>");
		}
		
		if (aggregatedValueBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aggregatedValueBefore: ");
			aggregatedValueBefore.appendAsString(sb, indentLevel + 1);
		}
		
		if (aggregatedValueAfter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("aggregatedValueAfter: ");
			aggregatedValueAfter.appendAsString(sb, indentLevel + 1);
		}
		
		if (accumulatedUnits != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accumulatedUnits: ").append(accumulatedUnits);
		}
		
		if (accountUnitsUsed != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountUnitsUsed: ").append(accountUnitsUsed);
		}
		
		if (accountUnitsDeducted != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountUnitsDeducted: ").append(accountUnitsDeducted);
		}
		
		if (specifiedConsumptions != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("specifiedConsumptions: ");
			specifiedConsumptions.appendAsString(sb, indentLevel + 1);
		}
		
		if (usedOffers != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("usedOffers: ");
			usedOffers.appendAsString(sb, indentLevel + 1);
		}
		
		if (usageCounters != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("usageCounters: ");
			usageCounters.appendAsString(sb, indentLevel + 1);
		}
		
		if (providersFamilyAndFriendsID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("providersFamilyAndFriendsID: ").append(providersFamilyAndFriendsID);
		}
		
		if (usedOffersAdditionalInfo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("usedOffersAdditionalInfo: ");
			usedOffersAdditionalInfo.appendAsString(sb, indentLevel + 1);
		}
		
		if (accountHomeTimeZone != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountHomeTimeZone: ").append(accountHomeTimeZone);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

