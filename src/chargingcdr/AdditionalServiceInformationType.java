/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class AdditionalServiceInformationType implements Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private Unsigned64 unsigned64 = null;
	private FloatingDecimal decimalNumber = null;
	private BerUTF8String string = null;
	private BerUTF8String ipAddress = null;
	private MonetaryUnits money = null;
	private BerBoolean boolean_ = null;
	
	public AdditionalServiceInformationType() {
	}

	public AdditionalServiceInformationType(byte[] code) {
		this.code = code;
	}

	public void setUnsigned64(Unsigned64 unsigned64) {
		this.unsigned64 = unsigned64;
	}

	public Unsigned64 getUnsigned64() {
		return unsigned64;
	}

	public void setDecimalNumber(FloatingDecimal decimalNumber) {
		this.decimalNumber = decimalNumber;
	}

	public FloatingDecimal getDecimalNumber() {
		return decimalNumber;
	}

	public void setString(BerUTF8String string) {
		this.string = string;
	}

	public BerUTF8String getString() {
		return string;
	}

	public void setIpAddress(BerUTF8String ipAddress) {
		this.ipAddress = ipAddress;
	}

	public BerUTF8String getIpAddress() {
		return ipAddress;
	}

	public void setMoney(MonetaryUnits money) {
		this.money = money;
	}

	public MonetaryUnits getMoney() {
		return money;
	}

	public void setBoolean(BerBoolean boolean_) {
		this.boolean_ = boolean_;
	}

	public BerBoolean getBoolean() {
		return boolean_;
	}

	public int encode(OutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (boolean_ != null) {
			codeLength += boolean_.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			os.write(0x85);
			codeLength += 1;
			return codeLength;
		}
		
		if (money != null) {
			codeLength += money.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			os.write(0xA4);
			codeLength += 1;
			return codeLength;
		}
		
		if (ipAddress != null) {
			codeLength += ipAddress.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
			return codeLength;
		}
		
		if (string != null) {
			codeLength += string.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
			return codeLength;
		}
		
		if (decimalNumber != null) {
			codeLength += decimalNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			os.write(0xA1);
			codeLength += 1;
			return codeLength;
		}
		
		if (unsigned64 != null) {
			codeLength += unsigned64.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			os.write(0x80);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			unsigned64 = new Unsigned64();
			codeLength += unsigned64.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			decimalNumber = new FloatingDecimal();
			codeLength += decimalNumber.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			string = new BerUTF8String();
			codeLength += string.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			ipAddress = new BerUTF8String();
			codeLength += ipAddress.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			money = new MonetaryUnits();
			codeLength += money.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			boolean_ = new BerBoolean();
			codeLength += boolean_.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (unsigned64 != null) {
			sb.append("unsigned64: ").append(unsigned64);
			return;
		}

		if (decimalNumber != null) {
			sb.append("decimalNumber: ");
			decimalNumber.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (string != null) {
			sb.append("string: ").append(string);
			return;
		}

		if (ipAddress != null) {
			sb.append("ipAddress: ").append(ipAddress);
			return;
		}

		if (money != null) {
			sb.append("money: ");
			money.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (boolean_ != null) {
			sb.append("boolean_: ").append(boolean_);
			return;
		}

		sb.append("<none>");
	}

}

