/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class UsageCounterType implements Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private Integer64 usageCounterUnit = null;
	private MonetaryUnits usageCounterMoney = null;
	
	public UsageCounterType() {
	}

	public UsageCounterType(byte[] code) {
		this.code = code;
	}

	public void setUsageCounterUnit(Integer64 usageCounterUnit) {
		this.usageCounterUnit = usageCounterUnit;
	}

	public Integer64 getUsageCounterUnit() {
		return usageCounterUnit;
	}

	public void setUsageCounterMoney(MonetaryUnits usageCounterMoney) {
		this.usageCounterMoney = usageCounterMoney;
	}

	public MonetaryUnits getUsageCounterMoney() {
		return usageCounterMoney;
	}

	public int encode(OutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (usageCounterMoney != null) {
			codeLength += usageCounterMoney.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			os.write(0xA1);
			codeLength += 1;
			return codeLength;
		}
		
		if (usageCounterUnit != null) {
			codeLength += usageCounterUnit.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			os.write(0x80);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			usageCounterUnit = new Integer64();
			codeLength += usageCounterUnit.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			usageCounterMoney = new MonetaryUnits();
			codeLength += usageCounterMoney.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (usageCounterUnit != null) {
			sb.append("usageCounterUnit: ").append(usageCounterUnit);
			return;
		}

		if (usageCounterMoney != null) {
			sb.append("usageCounterMoney: ");
			usageCounterMoney.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

