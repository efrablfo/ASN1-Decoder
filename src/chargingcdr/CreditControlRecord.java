/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class CreditControlRecord implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class TariffInfo implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<SelectionTreeParameter> seqOf = null;

		public TariffInfo() {
			seqOf = new ArrayList<SelectionTreeParameter>();
		}

		public TariffInfo(byte[] code) {
			this.code = code;
		}

		public List<SelectionTreeParameter> getSelectionTreeParameter() {
			if (seqOf == null) {
				seqOf = new ArrayList<SelectionTreeParameter>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				SelectionTreeParameter element = new SelectionTreeParameter();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<SelectionTreeParameter> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ChargingContextSpecific implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ContextParameter> seqOf = null;

		public ChargingContextSpecific() {
			seqOf = new ArrayList<ContextParameter>();
		}

		public ChargingContextSpecific(byte[] code) {
			this.code = code;
		}

		public List<ContextParameter> getContextParameter() {
			if (seqOf == null) {
				seqOf = new ArrayList<ContextParameter>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				ContextParameter element = new ContextParameter();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ContextParameter> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class TreeDefinedFields implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<TreeDefinedField> seqOf = null;

		public TreeDefinedFields() {
			seqOf = new ArrayList<TreeDefinedField>();
		}

		public TreeDefinedFields(byte[] code) {
			this.code = code;
		}

		public List<TreeDefinedField> getTreeDefinedField() {
			if (seqOf == null) {
				seqOf = new ArrayList<TreeDefinedField>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				TreeDefinedField element = new TreeDefinedField();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<TreeDefinedField> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class IndividualPriceFactorHistory implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<chargingcdr.IndividualPriceFactorHistory> seqOf = null;

		public IndividualPriceFactorHistory() {
			seqOf = new ArrayList<chargingcdr.IndividualPriceFactorHistory>();
		}

		public IndividualPriceFactorHistory(byte[] code) {
			this.code = code;
		}

		public List<chargingcdr.IndividualPriceFactorHistory> getIndividualPriceFactorHistory() {
			if (seqOf == null) {
				seqOf = new ArrayList<chargingcdr.IndividualPriceFactorHistory>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				chargingcdr.IndividualPriceFactorHistory element = new chargingcdr.IndividualPriceFactorHistory();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<chargingcdr.IndividualPriceFactorHistory> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ProviderCreditControlRecord implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<chargingcdr.ProviderCreditControlRecord> seqOf = null;

		public ProviderCreditControlRecord() {
			seqOf = new ArrayList<chargingcdr.ProviderCreditControlRecord>();
		}

		public ProviderCreditControlRecord(byte[] code) {
			this.code = code;
		}

		public List<chargingcdr.ProviderCreditControlRecord> getProviderCreditControlRecord() {
			if (seqOf == null) {
				seqOf = new ArrayList<chargingcdr.ProviderCreditControlRecord>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				chargingcdr.ProviderCreditControlRecord element = new chargingcdr.ProviderCreditControlRecord();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<chargingcdr.ProviderCreditControlRecord> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class ChargingContextOutputFields implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<ServiceOutputField> seqOf = null;

		public ChargingContextOutputFields() {
			seqOf = new ArrayList<ServiceOutputField>();
		}

		public ChargingContextOutputFields(byte[] code) {
			this.code = code;
		}

		public List<ServiceOutputField> getServiceOutputField() {
			if (seqOf == null) {
				seqOf = new ArrayList<ServiceOutputField>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				ServiceOutputField element = new ServiceOutputField();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<ServiceOutputField> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class AdditionalServiceInformationFields implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<AdditionalServiceInformationField> seqOf = null;

		public AdditionalServiceInformationFields() {
			seqOf = new ArrayList<AdditionalServiceInformationField>();
		}

		public AdditionalServiceInformationFields(byte[] code) {
			this.code = code;
		}

		public List<AdditionalServiceInformationField> getAdditionalServiceInformationField() {
			if (seqOf == null) {
				seqOf = new ArrayList<AdditionalServiceInformationField>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				AdditionalServiceInformationField element = new AdditionalServiceInformationField();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<AdditionalServiceInformationField> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private Unsigned32 serviceIdentifier = null;
	private UsedServiceUnits usedServiceUnits = null;
	private TimeStamp eventTime = null;
	private TimeStamp triggerTime = null;
	private ServiceScenario serviceScenario = null;
	private ServiceExtension serviceExtension = null;
	private RoamingPosition roamingPosition = null;
	private TariffInfo tariffInfo = null;
	private CCAccountData cCAccountData = null;
	private ChargingContextSpecific chargingContextSpecific = null;
	private TreeDefinedFields treeDefinedFields = null;
	private BonusAdjustment bonusAdjustment = null;
	private ServiceSetupResult serviceSetupResult = null;
	private TerminationCause terminationCause = null;
	private RatedUnits ratedUnits = null;
	private IndividualPriceFactorHistory individualPriceFactorHistory = null;
	private PeriodicAccountMgmtData periodicAccountMgmtData = null;
	private ProviderCreditControlRecord providerCreditControlRecord = null;
	private ChargingContextOutputFields chargingContextOutputFields = null;
	private AppliedProductFees appliedProductFees = null;
	private DaylightSavingTime daylightSavingTime = null;
	private AdditionalServiceInformationFields additionalServiceInformationFields = null;
	
	public CreditControlRecord() {
	}

	public CreditControlRecord(byte[] code) {
		this.code = code;
	}

	public void setServiceIdentifier(Unsigned32 serviceIdentifier) {
		this.serviceIdentifier = serviceIdentifier;
	}

	public Unsigned32 getServiceIdentifier() {
		return serviceIdentifier;
	}

	public void setUsedServiceUnits(UsedServiceUnits usedServiceUnits) {
		this.usedServiceUnits = usedServiceUnits;
	}

	public UsedServiceUnits getUsedServiceUnits() {
		return usedServiceUnits;
	}

	public void setEventTime(TimeStamp eventTime) {
		this.eventTime = eventTime;
	}

	public TimeStamp getEventTime() {
		return eventTime;
	}

	public void setTriggerTime(TimeStamp triggerTime) {
		this.triggerTime = triggerTime;
	}

	public TimeStamp getTriggerTime() {
		return triggerTime;
	}

	public void setServiceScenario(ServiceScenario serviceScenario) {
		this.serviceScenario = serviceScenario;
	}

	public ServiceScenario getServiceScenario() {
		return serviceScenario;
	}

	public void setServiceExtension(ServiceExtension serviceExtension) {
		this.serviceExtension = serviceExtension;
	}

	public ServiceExtension getServiceExtension() {
		return serviceExtension;
	}

	public void setRoamingPosition(RoamingPosition roamingPosition) {
		this.roamingPosition = roamingPosition;
	}

	public RoamingPosition getRoamingPosition() {
		return roamingPosition;
	}

	public void setTariffInfo(TariffInfo tariffInfo) {
		this.tariffInfo = tariffInfo;
	}

	public TariffInfo getTariffInfo() {
		return tariffInfo;
	}

	public void setCCAccountData(CCAccountData cCAccountData) {
		this.cCAccountData = cCAccountData;
	}

	public CCAccountData getCCAccountData() {
		return cCAccountData;
	}

	public void setChargingContextSpecific(ChargingContextSpecific chargingContextSpecific) {
		this.chargingContextSpecific = chargingContextSpecific;
	}

	public ChargingContextSpecific getChargingContextSpecific() {
		return chargingContextSpecific;
	}

	public void setTreeDefinedFields(TreeDefinedFields treeDefinedFields) {
		this.treeDefinedFields = treeDefinedFields;
	}

	public TreeDefinedFields getTreeDefinedFields() {
		return treeDefinedFields;
	}

	public void setBonusAdjustment(BonusAdjustment bonusAdjustment) {
		this.bonusAdjustment = bonusAdjustment;
	}

	public BonusAdjustment getBonusAdjustment() {
		return bonusAdjustment;
	}

	public void setServiceSetupResult(ServiceSetupResult serviceSetupResult) {
		this.serviceSetupResult = serviceSetupResult;
	}

	public ServiceSetupResult getServiceSetupResult() {
		return serviceSetupResult;
	}

	public void setTerminationCause(TerminationCause terminationCause) {
		this.terminationCause = terminationCause;
	}

	public TerminationCause getTerminationCause() {
		return terminationCause;
	}

	public void setRatedUnits(RatedUnits ratedUnits) {
		this.ratedUnits = ratedUnits;
	}

	public RatedUnits getRatedUnits() {
		return ratedUnits;
	}

	public void setIndividualPriceFactorHistory(IndividualPriceFactorHistory individualPriceFactorHistory) {
		this.individualPriceFactorHistory = individualPriceFactorHistory;
	}

	public IndividualPriceFactorHistory getIndividualPriceFactorHistory() {
		return individualPriceFactorHistory;
	}

	public void setPeriodicAccountMgmtData(PeriodicAccountMgmtData periodicAccountMgmtData) {
		this.periodicAccountMgmtData = periodicAccountMgmtData;
	}

	public PeriodicAccountMgmtData getPeriodicAccountMgmtData() {
		return periodicAccountMgmtData;
	}

	public void setProviderCreditControlRecord(ProviderCreditControlRecord providerCreditControlRecord) {
		this.providerCreditControlRecord = providerCreditControlRecord;
	}

	public ProviderCreditControlRecord getProviderCreditControlRecord() {
		return providerCreditControlRecord;
	}

	public void setChargingContextOutputFields(ChargingContextOutputFields chargingContextOutputFields) {
		this.chargingContextOutputFields = chargingContextOutputFields;
	}

	public ChargingContextOutputFields getChargingContextOutputFields() {
		return chargingContextOutputFields;
	}

	public void setAppliedProductFees(AppliedProductFees appliedProductFees) {
		this.appliedProductFees = appliedProductFees;
	}

	public AppliedProductFees getAppliedProductFees() {
		return appliedProductFees;
	}

	public void setDaylightSavingTime(DaylightSavingTime daylightSavingTime) {
		this.daylightSavingTime = daylightSavingTime;
	}

	public DaylightSavingTime getDaylightSavingTime() {
		return daylightSavingTime;
	}

	public void setAdditionalServiceInformationFields(AdditionalServiceInformationFields additionalServiceInformationFields) {
		this.additionalServiceInformationFields = additionalServiceInformationFields;
	}

	public AdditionalServiceInformationFields getAdditionalServiceInformationFields() {
		return additionalServiceInformationFields;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (additionalServiceInformationFields != null) {
			codeLength += additionalServiceInformationFields.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 22
			os.write(0xB6);
			codeLength += 1;
		}
		
		if (daylightSavingTime != null) {
			codeLength += daylightSavingTime.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 21
			os.write(0x95);
			codeLength += 1;
		}
		
		if (appliedProductFees != null) {
			codeLength += appliedProductFees.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 20
			os.write(0xB4);
			codeLength += 1;
		}
		
		if (chargingContextOutputFields != null) {
			codeLength += chargingContextOutputFields.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 19
			os.write(0xB3);
			codeLength += 1;
		}
		
		if (providerCreditControlRecord != null) {
			codeLength += providerCreditControlRecord.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 18
			os.write(0xB2);
			codeLength += 1;
		}
		
		if (periodicAccountMgmtData != null) {
			codeLength += periodicAccountMgmtData.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 17
			os.write(0xB1);
			codeLength += 1;
		}
		
		if (individualPriceFactorHistory != null) {
			codeLength += individualPriceFactorHistory.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 16
			os.write(0xB0);
			codeLength += 1;
		}
		
		if (ratedUnits != null) {
			codeLength += ratedUnits.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			os.write(0xAF);
			codeLength += 1;
		}
		
		if (terminationCause != null) {
			codeLength += terminationCause.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			os.write(0x8E);
			codeLength += 1;
		}
		
		if (serviceSetupResult != null) {
			codeLength += serviceSetupResult.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			os.write(0x8D);
			codeLength += 1;
		}
		
		if (bonusAdjustment != null) {
			codeLength += bonusAdjustment.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 12
			os.write(0xAC);
			codeLength += 1;
		}
		
		if (treeDefinedFields != null) {
			codeLength += treeDefinedFields.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 11
			os.write(0xAB);
			codeLength += 1;
		}
		
		if (chargingContextSpecific != null) {
			codeLength += chargingContextSpecific.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			os.write(0xAA);
			codeLength += 1;
		}
		
		codeLength += cCAccountData.encode(os, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 9
		os.write(0xA9);
		codeLength += 1;
		
		if (tariffInfo != null) {
			codeLength += tariffInfo.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			os.write(0xA8);
			codeLength += 1;
		}
		
		if (roamingPosition != null) {
			codeLength += roamingPosition.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			os.write(0x87);
			codeLength += 1;
		}
		
		if (serviceExtension != null) {
			codeLength += serviceExtension.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			os.write(0x86);
			codeLength += 1;
		}
		
		codeLength += serviceScenario.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		os.write(0x85);
		codeLength += 1;
		
		codeLength += triggerTime.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		os.write(0x84);
		codeLength += 1;
		
		codeLength += eventTime.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		os.write(0x83);
		codeLength += 1;
		
		if (usedServiceUnits != null) {
			codeLength += usedServiceUnits.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			os.write(0xA2);
			codeLength += 1;
		}
		
		codeLength += serviceIdentifier.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		os.write(0x81);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			serviceIdentifier = new Unsigned32();
			subCodeLength += serviceIdentifier.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			usedServiceUnits = new UsedServiceUnits();
			subCodeLength += usedServiceUnits.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			eventTime = new TimeStamp();
			subCodeLength += eventTime.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			triggerTime = new TimeStamp();
			subCodeLength += triggerTime.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			serviceScenario = new ServiceScenario();
			subCodeLength += serviceScenario.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			serviceExtension = new ServiceExtension();
			subCodeLength += serviceExtension.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			roamingPosition = new RoamingPosition();
			subCodeLength += roamingPosition.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			tariffInfo = new TariffInfo();
			subCodeLength += tariffInfo.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 9)) {
			cCAccountData = new CCAccountData();
			subCodeLength += cCAccountData.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			chargingContextSpecific = new ChargingContextSpecific();
			subCodeLength += chargingContextSpecific.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 11)) {
			treeDefinedFields = new TreeDefinedFields();
			subCodeLength += treeDefinedFields.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 12)) {
			bonusAdjustment = new BonusAdjustment();
			subCodeLength += bonusAdjustment.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			serviceSetupResult = new ServiceSetupResult();
			subCodeLength += serviceSetupResult.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			terminationCause = new TerminationCause();
			subCodeLength += terminationCause.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			ratedUnits = new RatedUnits();
			subCodeLength += ratedUnits.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 16)) {
			individualPriceFactorHistory = new IndividualPriceFactorHistory();
			subCodeLength += individualPriceFactorHistory.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 17)) {
			periodicAccountMgmtData = new PeriodicAccountMgmtData();
			subCodeLength += periodicAccountMgmtData.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 18)) {
			providerCreditControlRecord = new ProviderCreditControlRecord();
			subCodeLength += providerCreditControlRecord.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 19)) {
			chargingContextOutputFields = new ChargingContextOutputFields();
			subCodeLength += chargingContextOutputFields.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 20)) {
			appliedProductFees = new AppliedProductFees();
			subCodeLength += appliedProductFees.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
			daylightSavingTime = new DaylightSavingTime();
			subCodeLength += daylightSavingTime.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 22)) {
			additionalServiceInformationFields = new AdditionalServiceInformationFields();
			subCodeLength += additionalServiceInformationFields.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (serviceIdentifier != null) {
			sb.append("serviceIdentifier: ").append(serviceIdentifier);
		}
		else {
			sb.append("serviceIdentifier: <empty-required-field>");
		}
		
		if (usedServiceUnits != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("usedServiceUnits: ");
			usedServiceUnits.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (eventTime != null) {
			sb.append("eventTime: ").append(eventTime);
		}
		else {
			sb.append("eventTime: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (triggerTime != null) {
			sb.append("triggerTime: ").append(triggerTime);
		}
		else {
			sb.append("triggerTime: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (serviceScenario != null) {
			sb.append("serviceScenario: ").append(serviceScenario);
		}
		else {
			sb.append("serviceScenario: <empty-required-field>");
		}
		
		if (serviceExtension != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceExtension: ").append(serviceExtension);
		}
		
		if (roamingPosition != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("roamingPosition: ").append(roamingPosition);
		}
		
		if (tariffInfo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("tariffInfo: ");
			tariffInfo.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cCAccountData != null) {
			sb.append("cCAccountData: ");
			cCAccountData.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("cCAccountData: <empty-required-field>");
		}
		
		if (chargingContextSpecific != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingContextSpecific: ");
			chargingContextSpecific.appendAsString(sb, indentLevel + 1);
		}
		
		if (treeDefinedFields != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("treeDefinedFields: ");
			treeDefinedFields.appendAsString(sb, indentLevel + 1);
		}
		
		if (bonusAdjustment != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("bonusAdjustment: ");
			bonusAdjustment.appendAsString(sb, indentLevel + 1);
		}
		
		if (serviceSetupResult != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceSetupResult: ").append(serviceSetupResult);
		}
		
		if (terminationCause != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("terminationCause: ").append(terminationCause);
		}
		
		if (ratedUnits != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ratedUnits: ");
			ratedUnits.appendAsString(sb, indentLevel + 1);
		}
		
		if (individualPriceFactorHistory != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("individualPriceFactorHistory: ");
			individualPriceFactorHistory.appendAsString(sb, indentLevel + 1);
		}
		
		if (periodicAccountMgmtData != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("periodicAccountMgmtData: ");
			periodicAccountMgmtData.appendAsString(sb, indentLevel + 1);
		}
		
		if (providerCreditControlRecord != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("providerCreditControlRecord: ");
			providerCreditControlRecord.appendAsString(sb, indentLevel + 1);
		}
		
		if (chargingContextOutputFields != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargingContextOutputFields: ");
			chargingContextOutputFields.appendAsString(sb, indentLevel + 1);
		}
		
		if (appliedProductFees != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("appliedProductFees: ");
			appliedProductFees.appendAsString(sb, indentLevel + 1);
		}
		
		if (daylightSavingTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("daylightSavingTime: ").append(daylightSavingTime);
		}
		
		if (additionalServiceInformationFields != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("additionalServiceInformationFields: ");
			additionalServiceInformationFields.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

