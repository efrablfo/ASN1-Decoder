/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class ChargingDataOutputRecord implements Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private SCFPDPRecord sCFPDPRecord = null;
	private SCFSMSMORecord sCFSMSPSMORecord = null;
	private SCFSMSMORecord sCFSMSCSMORecord = null;
	private DiameterCreditControlRecord diameterCreditControlRecord = null;
	private FBCRatingRecord fBCRatingRecord = null;
	private RTCCreditControlRecord rTCCreditControlRecord = null;
	private OnlineCreditControlRecord onlineCreditControlRecord = null;
	
	public ChargingDataOutputRecord() {
	}

	public ChargingDataOutputRecord(byte[] code) {
		this.code = code;
	}

	public void setSCFPDPRecord(SCFPDPRecord sCFPDPRecord) {
		this.sCFPDPRecord = sCFPDPRecord;
	}

	public SCFPDPRecord getSCFPDPRecord() {
		return sCFPDPRecord;
	}

	public void setSCFSMSPSMORecord(SCFSMSMORecord sCFSMSPSMORecord) {
		this.sCFSMSPSMORecord = sCFSMSPSMORecord;
	}

	public SCFSMSMORecord getSCFSMSPSMORecord() {
		return sCFSMSPSMORecord;
	}

	public void setSCFSMSCSMORecord(SCFSMSMORecord sCFSMSCSMORecord) {
		this.sCFSMSCSMORecord = sCFSMSCSMORecord;
	}

	public SCFSMSMORecord getSCFSMSCSMORecord() {
		return sCFSMSCSMORecord;
	}

	public void setDiameterCreditControlRecord(DiameterCreditControlRecord diameterCreditControlRecord) {
		this.diameterCreditControlRecord = diameterCreditControlRecord;
	}

	public DiameterCreditControlRecord getDiameterCreditControlRecord() {
		return diameterCreditControlRecord;
	}

	public void setFBCRatingRecord(FBCRatingRecord fBCRatingRecord) {
		this.fBCRatingRecord = fBCRatingRecord;
	}

	public FBCRatingRecord getFBCRatingRecord() {
		return fBCRatingRecord;
	}

	public void setRTCCreditControlRecord(RTCCreditControlRecord rTCCreditControlRecord) {
		this.rTCCreditControlRecord = rTCCreditControlRecord;
	}

	public RTCCreditControlRecord getRTCCreditControlRecord() {
		return rTCCreditControlRecord;
	}

	public void setOnlineCreditControlRecord(OnlineCreditControlRecord onlineCreditControlRecord) {
		this.onlineCreditControlRecord = onlineCreditControlRecord;
	}

	public OnlineCreditControlRecord getOnlineCreditControlRecord() {
		return onlineCreditControlRecord;
	}

	public int encode(OutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (onlineCreditControlRecord != null) {
			codeLength += onlineCreditControlRecord.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			os.write(0xA6);
			codeLength += 1;
			return codeLength;
		}
		
		if (rTCCreditControlRecord != null) {
			codeLength += rTCCreditControlRecord.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			os.write(0xA5);
			codeLength += 1;
			return codeLength;
		}
		
		if (fBCRatingRecord != null) {
			codeLength += fBCRatingRecord.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			os.write(0xA4);
			codeLength += 1;
			return codeLength;
		}
		
		if (diameterCreditControlRecord != null) {
			codeLength += diameterCreditControlRecord.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			os.write(0xA3);
			codeLength += 1;
			return codeLength;
		}
		
		if (sCFSMSCSMORecord != null) {
			codeLength += sCFSMSCSMORecord.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			os.write(0xA2);
			codeLength += 1;
			return codeLength;
		}
		
		if (sCFSMSPSMORecord != null) {
			codeLength += sCFSMSPSMORecord.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			os.write(0xA1);
			codeLength += 1;
			return codeLength;
		}
		
		if (sCFPDPRecord != null) {
			codeLength += sCFPDPRecord.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			os.write(0xA0);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			sCFPDPRecord = new SCFPDPRecord();
			codeLength += sCFPDPRecord.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			sCFSMSPSMORecord = new SCFSMSMORecord();
			codeLength += sCFSMSPSMORecord.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			sCFSMSCSMORecord = new SCFSMSMORecord();
			codeLength += sCFSMSCSMORecord.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			diameterCreditControlRecord = new DiameterCreditControlRecord();
			codeLength += diameterCreditControlRecord.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			fBCRatingRecord = new FBCRatingRecord();
			codeLength += fBCRatingRecord.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			rTCCreditControlRecord = new RTCCreditControlRecord();
			codeLength += rTCCreditControlRecord.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			onlineCreditControlRecord = new OnlineCreditControlRecord();
			codeLength += onlineCreditControlRecord.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (sCFPDPRecord != null) {
			sb.append("sCFPDPRecord: ");
			sCFPDPRecord.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (sCFSMSPSMORecord != null) {
			sb.append("sCFSMSPSMORecord: ");
			sCFSMSPSMORecord.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (sCFSMSCSMORecord != null) {
			sb.append("sCFSMSCSMORecord: ");
			sCFSMSCSMORecord.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (diameterCreditControlRecord != null) {
			sb.append("diameterCreditControlRecord: ");
			diameterCreditControlRecord.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (fBCRatingRecord != null) {
			sb.append("fBCRatingRecord: ");
			fBCRatingRecord.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (rTCCreditControlRecord != null) {
			sb.append("rTCCreditControlRecord: ");
			rTCCreditControlRecord.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (onlineCreditControlRecord != null) {
			sb.append("onlineCreditControlRecord: ");
			onlineCreditControlRecord.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

