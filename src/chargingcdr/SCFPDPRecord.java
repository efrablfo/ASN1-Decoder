/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class SCFPDPRecord implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class AccumulatorValueInfo implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<chargingcdr.AccumulatorValueInfo> seqOf = null;

		public AccumulatorValueInfo() {
			seqOf = new ArrayList<chargingcdr.AccumulatorValueInfo>();
		}

		public AccumulatorValueInfo(byte[] code) {
			this.code = code;
		}

		public List<chargingcdr.AccumulatorValueInfo> getAccumulatorValueInfo() {
			if (seqOf == null) {
				seqOf = new ArrayList<chargingcdr.AccumulatorValueInfo>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				chargingcdr.AccumulatorValueInfo element = new chargingcdr.AccumulatorValueInfo();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<chargingcdr.AccumulatorValueInfo> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class DedicatedAccountInfo implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<chargingcdr.DedicatedAccountInfo> seqOf = null;

		public DedicatedAccountInfo() {
			seqOf = new ArrayList<chargingcdr.DedicatedAccountInfo>();
		}

		public DedicatedAccountInfo(byte[] code) {
			this.code = code;
		}

		public List<chargingcdr.DedicatedAccountInfo> getDedicatedAccountInfo() {
			if (seqOf == null) {
				seqOf = new ArrayList<chargingcdr.DedicatedAccountInfo>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				chargingcdr.DedicatedAccountInfo element = new chargingcdr.DedicatedAccountInfo();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<chargingcdr.DedicatedAccountInfo> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static class CommunityDataInfo implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<chargingcdr.CommunityDataInfo> seqOf = null;

		public CommunityDataInfo() {
			seqOf = new ArrayList<chargingcdr.CommunityDataInfo>();
		}

		public CommunityDataInfo(byte[] code) {
			this.code = code;
		}

		public List<chargingcdr.CommunityDataInfo> getCommunityDataInfo() {
			if (seqOf == null) {
				seqOf = new ArrayList<chargingcdr.CommunityDataInfo>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				chargingcdr.CommunityDataInfo element = new chargingcdr.CommunityDataInfo();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<chargingcdr.CommunityDataInfo> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private ChargingID chargingID = null;
	private GSNAddress ggsnAddressUsed = null;
	private AccessPointName accessPointName = null;
	private RecordSequenceNumber recordSequenceNumber = null;
	private NodeID nodeID = null;
	private LocalSequenceNumber localSequenceNumber = null;
	private BerBoolean lastPartialOutput = null;
	private TrafficCase trafficCase = null;
	private AddressString subscriberNumber = null;
	private ServiceClass serviceClass = null;
	private MoneyAmount accountValueBefore = null;
	private MoneyAmount accountValueAfter = null;
	private MoneyAmount finalCharge = null;
	private ChargedDuration chargedDuration = null;
	private CdrReason cdrReason = null;
	private TeleServiceCode teleServiceCode = null;
	private TimeStamp startOfChargingOfContext = null;
	private FamilyAndFriendsIndicator familyAndFriendsIndicator = null;
	private NumberOfSDPInterrogations numberOfSDPInterrogations = null;
	private DataVolume dataVolume = null;
	private CurrencyType currencyType = null;
	private AddressString callingPartyNumber = null;
	private AddressString originatingLocationInfo = null;
	private AddressString accountNumber = null;
	private AddressString terminatingLocationInfo = null;
	private AddressString calledPartyNumber = null;
	private AccumulatorValueInfo accumulatorValueInfo = null;
	private DedicatedAccountInfo dedicatedAccountInfo = null;
	private AccountGroupID accountGroupID = null;
	private ServiceOfferings serviceOfferings = null;
	private CommunityDataInfo communityDataInfo = null;
	private TimeStamp triggerTime = null;
	private CellID cellID = null;
	private LocationAreaID locationAreaID = null;
	private CategorizationInformation categorizationInformation = null;
	private RatedDurations ratedDurations = null;
	private IMSI servedIMSI = null;
	
	public SCFPDPRecord() {
	}

	public SCFPDPRecord(byte[] code) {
		this.code = code;
	}

	public void setChargingID(ChargingID chargingID) {
		this.chargingID = chargingID;
	}

	public ChargingID getChargingID() {
		return chargingID;
	}

	public void setGgsnAddressUsed(GSNAddress ggsnAddressUsed) {
		this.ggsnAddressUsed = ggsnAddressUsed;
	}

	public GSNAddress getGgsnAddressUsed() {
		return ggsnAddressUsed;
	}

	public void setAccessPointName(AccessPointName accessPointName) {
		this.accessPointName = accessPointName;
	}

	public AccessPointName getAccessPointName() {
		return accessPointName;
	}

	public void setRecordSequenceNumber(RecordSequenceNumber recordSequenceNumber) {
		this.recordSequenceNumber = recordSequenceNumber;
	}

	public RecordSequenceNumber getRecordSequenceNumber() {
		return recordSequenceNumber;
	}

	public void setNodeID(NodeID nodeID) {
		this.nodeID = nodeID;
	}

	public NodeID getNodeID() {
		return nodeID;
	}

	public void setLocalSequenceNumber(LocalSequenceNumber localSequenceNumber) {
		this.localSequenceNumber = localSequenceNumber;
	}

	public LocalSequenceNumber getLocalSequenceNumber() {
		return localSequenceNumber;
	}

	public void setLastPartialOutput(BerBoolean lastPartialOutput) {
		this.lastPartialOutput = lastPartialOutput;
	}

	public BerBoolean getLastPartialOutput() {
		return lastPartialOutput;
	}

	public void setTrafficCase(TrafficCase trafficCase) {
		this.trafficCase = trafficCase;
	}

	public TrafficCase getTrafficCase() {
		return trafficCase;
	}

	public void setSubscriberNumber(AddressString subscriberNumber) {
		this.subscriberNumber = subscriberNumber;
	}

	public AddressString getSubscriberNumber() {
		return subscriberNumber;
	}

	public void setServiceClass(ServiceClass serviceClass) {
		this.serviceClass = serviceClass;
	}

	public ServiceClass getServiceClass() {
		return serviceClass;
	}

	public void setAccountValueBefore(MoneyAmount accountValueBefore) {
		this.accountValueBefore = accountValueBefore;
	}

	public MoneyAmount getAccountValueBefore() {
		return accountValueBefore;
	}

	public void setAccountValueAfter(MoneyAmount accountValueAfter) {
		this.accountValueAfter = accountValueAfter;
	}

	public MoneyAmount getAccountValueAfter() {
		return accountValueAfter;
	}

	public void setFinalCharge(MoneyAmount finalCharge) {
		this.finalCharge = finalCharge;
	}

	public MoneyAmount getFinalCharge() {
		return finalCharge;
	}

	public void setChargedDuration(ChargedDuration chargedDuration) {
		this.chargedDuration = chargedDuration;
	}

	public ChargedDuration getChargedDuration() {
		return chargedDuration;
	}

	public void setCdrReason(CdrReason cdrReason) {
		this.cdrReason = cdrReason;
	}

	public CdrReason getCdrReason() {
		return cdrReason;
	}

	public void setTeleServiceCode(TeleServiceCode teleServiceCode) {
		this.teleServiceCode = teleServiceCode;
	}

	public TeleServiceCode getTeleServiceCode() {
		return teleServiceCode;
	}

	public void setStartOfChargingOfContext(TimeStamp startOfChargingOfContext) {
		this.startOfChargingOfContext = startOfChargingOfContext;
	}

	public TimeStamp getStartOfChargingOfContext() {
		return startOfChargingOfContext;
	}

	public void setFamilyAndFriendsIndicator(FamilyAndFriendsIndicator familyAndFriendsIndicator) {
		this.familyAndFriendsIndicator = familyAndFriendsIndicator;
	}

	public FamilyAndFriendsIndicator getFamilyAndFriendsIndicator() {
		return familyAndFriendsIndicator;
	}

	public void setNumberOfSDPInterrogations(NumberOfSDPInterrogations numberOfSDPInterrogations) {
		this.numberOfSDPInterrogations = numberOfSDPInterrogations;
	}

	public NumberOfSDPInterrogations getNumberOfSDPInterrogations() {
		return numberOfSDPInterrogations;
	}

	public void setDataVolume(DataVolume dataVolume) {
		this.dataVolume = dataVolume;
	}

	public DataVolume getDataVolume() {
		return dataVolume;
	}

	public void setCurrencyType(CurrencyType currencyType) {
		this.currencyType = currencyType;
	}

	public CurrencyType getCurrencyType() {
		return currencyType;
	}

	public void setCallingPartyNumber(AddressString callingPartyNumber) {
		this.callingPartyNumber = callingPartyNumber;
	}

	public AddressString getCallingPartyNumber() {
		return callingPartyNumber;
	}

	public void setOriginatingLocationInfo(AddressString originatingLocationInfo) {
		this.originatingLocationInfo = originatingLocationInfo;
	}

	public AddressString getOriginatingLocationInfo() {
		return originatingLocationInfo;
	}

	public void setAccountNumber(AddressString accountNumber) {
		this.accountNumber = accountNumber;
	}

	public AddressString getAccountNumber() {
		return accountNumber;
	}

	public void setTerminatingLocationInfo(AddressString terminatingLocationInfo) {
		this.terminatingLocationInfo = terminatingLocationInfo;
	}

	public AddressString getTerminatingLocationInfo() {
		return terminatingLocationInfo;
	}

	public void setCalledPartyNumber(AddressString calledPartyNumber) {
		this.calledPartyNumber = calledPartyNumber;
	}

	public AddressString getCalledPartyNumber() {
		return calledPartyNumber;
	}

	public void setAccumulatorValueInfo(AccumulatorValueInfo accumulatorValueInfo) {
		this.accumulatorValueInfo = accumulatorValueInfo;
	}

	public AccumulatorValueInfo getAccumulatorValueInfo() {
		return accumulatorValueInfo;
	}

	public void setDedicatedAccountInfo(DedicatedAccountInfo dedicatedAccountInfo) {
		this.dedicatedAccountInfo = dedicatedAccountInfo;
	}

	public DedicatedAccountInfo getDedicatedAccountInfo() {
		return dedicatedAccountInfo;
	}

	public void setAccountGroupID(AccountGroupID accountGroupID) {
		this.accountGroupID = accountGroupID;
	}

	public AccountGroupID getAccountGroupID() {
		return accountGroupID;
	}

	public void setServiceOfferings(ServiceOfferings serviceOfferings) {
		this.serviceOfferings = serviceOfferings;
	}

	public ServiceOfferings getServiceOfferings() {
		return serviceOfferings;
	}

	public void setCommunityDataInfo(CommunityDataInfo communityDataInfo) {
		this.communityDataInfo = communityDataInfo;
	}

	public CommunityDataInfo getCommunityDataInfo() {
		return communityDataInfo;
	}

	public void setTriggerTime(TimeStamp triggerTime) {
		this.triggerTime = triggerTime;
	}

	public TimeStamp getTriggerTime() {
		return triggerTime;
	}

	public void setCellID(CellID cellID) {
		this.cellID = cellID;
	}

	public CellID getCellID() {
		return cellID;
	}

	public void setLocationAreaID(LocationAreaID locationAreaID) {
		this.locationAreaID = locationAreaID;
	}

	public LocationAreaID getLocationAreaID() {
		return locationAreaID;
	}

	public void setCategorizationInformation(CategorizationInformation categorizationInformation) {
		this.categorizationInformation = categorizationInformation;
	}

	public CategorizationInformation getCategorizationInformation() {
		return categorizationInformation;
	}

	public void setRatedDurations(RatedDurations ratedDurations) {
		this.ratedDurations = ratedDurations;
	}

	public RatedDurations getRatedDurations() {
		return ratedDurations;
	}

	public void setServedIMSI(IMSI servedIMSI) {
		this.servedIMSI = servedIMSI;
	}

	public IMSI getServedIMSI() {
		return servedIMSI;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (servedIMSI != null) {
			codeLength += servedIMSI.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 36
			os.write(0x24);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (ratedDurations != null) {
			codeLength += ratedDurations.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 35
			os.write(0x23);
			os.write(0xBF);
			codeLength += 2;
		}
		
		if (categorizationInformation != null) {
			codeLength += categorizationInformation.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 34
			os.write(0x22);
			os.write(0xBF);
			codeLength += 2;
		}
		
		if (locationAreaID != null) {
			codeLength += locationAreaID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 33
			os.write(0x21);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (cellID != null) {
			codeLength += cellID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 32
			os.write(0x20);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (triggerTime != null) {
			codeLength += triggerTime.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 31
			os.write(0x1F);
			os.write(0x9F);
			codeLength += 2;
		}
		
		if (communityDataInfo != null) {
			codeLength += communityDataInfo.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 30
			os.write(0xBE);
			codeLength += 1;
		}
		
		if (serviceOfferings != null) {
			codeLength += serviceOfferings.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 29
			os.write(0x9D);
			codeLength += 1;
		}
		
		if (accountGroupID != null) {
			codeLength += accountGroupID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 28
			os.write(0x9C);
			codeLength += 1;
		}
		
		if (dedicatedAccountInfo != null) {
			codeLength += dedicatedAccountInfo.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 27
			os.write(0xBB);
			codeLength += 1;
		}
		
		if (accumulatorValueInfo != null) {
			codeLength += accumulatorValueInfo.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 26
			os.write(0xBA);
			codeLength += 1;
		}
		
		if (calledPartyNumber != null) {
			codeLength += calledPartyNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 25
			os.write(0x99);
			codeLength += 1;
		}
		
		if (terminatingLocationInfo != null) {
			codeLength += terminatingLocationInfo.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 24
			os.write(0x98);
			codeLength += 1;
		}
		
		if (accountNumber != null) {
			codeLength += accountNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 23
			os.write(0x97);
			codeLength += 1;
		}
		
		if (originatingLocationInfo != null) {
			codeLength += originatingLocationInfo.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 22
			os.write(0x96);
			codeLength += 1;
		}
		
		if (callingPartyNumber != null) {
			codeLength += callingPartyNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 21
			os.write(0x95);
			codeLength += 1;
		}
		
		if (currencyType != null) {
			codeLength += currencyType.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 20
			os.write(0x94);
			codeLength += 1;
		}
		
		if (dataVolume != null) {
			codeLength += dataVolume.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 19
			os.write(0x93);
			codeLength += 1;
		}
		
		codeLength += numberOfSDPInterrogations.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 18
		os.write(0x92);
		codeLength += 1;
		
		if (familyAndFriendsIndicator != null) {
			codeLength += familyAndFriendsIndicator.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			os.write(0x91);
			codeLength += 1;
		}
		
		if (startOfChargingOfContext != null) {
			codeLength += startOfChargingOfContext.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			os.write(0x90);
			codeLength += 1;
		}
		
		if (teleServiceCode != null) {
			codeLength += teleServiceCode.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 15
			os.write(0x8F);
			codeLength += 1;
		}
		
		codeLength += cdrReason.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 14
		os.write(0x8E);
		codeLength += 1;
		
		if (chargedDuration != null) {
			codeLength += chargedDuration.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			os.write(0x8D);
			codeLength += 1;
		}
		
		if (finalCharge != null) {
			codeLength += finalCharge.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			os.write(0x8C);
			codeLength += 1;
		}
		
		if (accountValueAfter != null) {
			codeLength += accountValueAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			os.write(0x8B);
			codeLength += 1;
		}
		
		if (accountValueBefore != null) {
			codeLength += accountValueBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			os.write(0x8A);
			codeLength += 1;
		}
		
		if (serviceClass != null) {
			codeLength += serviceClass.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			os.write(0x89);
			codeLength += 1;
		}
		
		if (subscriberNumber != null) {
			codeLength += subscriberNumber.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
		}
		
		if (trafficCase != null) {
			codeLength += trafficCase.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			os.write(0x87);
			codeLength += 1;
		}
		
		codeLength += lastPartialOutput.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 6
		os.write(0x86);
		codeLength += 1;
		
		codeLength += localSequenceNumber.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 5
		os.write(0x85);
		codeLength += 1;
		
		codeLength += nodeID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 4
		os.write(0x84);
		codeLength += 1;
		
		codeLength += recordSequenceNumber.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 3
		os.write(0x83);
		codeLength += 1;
		
		if (accessPointName != null) {
			codeLength += accessPointName.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		sublength = ggsnAddressUsed.encode(os);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(os, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		os.write(0xA1);
		codeLength += 1;
		
		codeLength += chargingID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			chargingID = new ChargingID();
			subCodeLength += chargingID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			subCodeLength += length.decode(is);
			ggsnAddressUsed = new GSNAddress();
			subCodeLength += ggsnAddressUsed.decode(is, null);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			accessPointName = new AccessPointName();
			subCodeLength += accessPointName.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			recordSequenceNumber = new RecordSequenceNumber();
			subCodeLength += recordSequenceNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			nodeID = new NodeID();
			subCodeLength += nodeID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			localSequenceNumber = new LocalSequenceNumber();
			subCodeLength += localSequenceNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			lastPartialOutput = new BerBoolean();
			subCodeLength += lastPartialOutput.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			trafficCase = new TrafficCase();
			subCodeLength += trafficCase.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			subscriberNumber = new AddressString();
			subCodeLength += subscriberNumber.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			serviceClass = new ServiceClass();
			subCodeLength += serviceClass.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			accountValueBefore = new MoneyAmount();
			subCodeLength += accountValueBefore.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			accountValueAfter = new MoneyAmount();
			subCodeLength += accountValueAfter.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			finalCharge = new MoneyAmount();
			subCodeLength += finalCharge.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			chargedDuration = new ChargedDuration();
			subCodeLength += chargedDuration.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			cdrReason = new CdrReason();
			subCodeLength += cdrReason.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 15)) {
			teleServiceCode = new TeleServiceCode();
			subCodeLength += teleServiceCode.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			startOfChargingOfContext = new TimeStamp();
			subCodeLength += startOfChargingOfContext.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			familyAndFriendsIndicator = new FamilyAndFriendsIndicator();
			subCodeLength += familyAndFriendsIndicator.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
			numberOfSDPInterrogations = new NumberOfSDPInterrogations();
			subCodeLength += numberOfSDPInterrogations.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 19)) {
			dataVolume = new DataVolume();
			subCodeLength += dataVolume.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 20)) {
			currencyType = new CurrencyType();
			subCodeLength += currencyType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 21)) {
			callingPartyNumber = new AddressString();
			subCodeLength += callingPartyNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 22)) {
			originatingLocationInfo = new AddressString();
			subCodeLength += originatingLocationInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 23)) {
			accountNumber = new AddressString();
			subCodeLength += accountNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 24)) {
			terminatingLocationInfo = new AddressString();
			subCodeLength += terminatingLocationInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 25)) {
			calledPartyNumber = new AddressString();
			subCodeLength += calledPartyNumber.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 26)) {
			accumulatorValueInfo = new AccumulatorValueInfo();
			subCodeLength += accumulatorValueInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 27)) {
			dedicatedAccountInfo = new DedicatedAccountInfo();
			subCodeLength += dedicatedAccountInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 28)) {
			accountGroupID = new AccountGroupID();
			subCodeLength += accountGroupID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 29)) {
			serviceOfferings = new ServiceOfferings();
			subCodeLength += serviceOfferings.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 30)) {
			communityDataInfo = new CommunityDataInfo();
			subCodeLength += communityDataInfo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 31)) {
			triggerTime = new TimeStamp();
			subCodeLength += triggerTime.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 32)) {
			cellID = new CellID();
			subCodeLength += cellID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 33)) {
			locationAreaID = new LocationAreaID();
			subCodeLength += locationAreaID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 34)) {
			categorizationInformation = new CategorizationInformation();
			subCodeLength += categorizationInformation.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 35)) {
			ratedDurations = new RatedDurations();
			subCodeLength += ratedDurations.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 36)) {
			servedIMSI = new IMSI();
			subCodeLength += servedIMSI.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (chargingID != null) {
			sb.append("chargingID: ").append(chargingID);
		}
		else {
			sb.append("chargingID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (ggsnAddressUsed != null) {
			sb.append("ggsnAddressUsed: ");
			ggsnAddressUsed.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("ggsnAddressUsed: <empty-required-field>");
		}
		
		if (accessPointName != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accessPointName: ").append(accessPointName);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (recordSequenceNumber != null) {
			sb.append("recordSequenceNumber: ").append(recordSequenceNumber);
		}
		else {
			sb.append("recordSequenceNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (nodeID != null) {
			sb.append("nodeID: ").append(nodeID);
		}
		else {
			sb.append("nodeID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (localSequenceNumber != null) {
			sb.append("localSequenceNumber: ").append(localSequenceNumber);
		}
		else {
			sb.append("localSequenceNumber: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (lastPartialOutput != null) {
			sb.append("lastPartialOutput: ").append(lastPartialOutput);
		}
		else {
			sb.append("lastPartialOutput: <empty-required-field>");
		}
		
		if (trafficCase != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("trafficCase: ").append(trafficCase);
		}
		
		if (subscriberNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("subscriberNumber: ").append(subscriberNumber);
		}
		
		if (serviceClass != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceClass: ").append(serviceClass);
		}
		
		if (accountValueBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountValueBefore: ").append(accountValueBefore);
		}
		
		if (accountValueAfter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountValueAfter: ").append(accountValueAfter);
		}
		
		if (finalCharge != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("finalCharge: ").append(finalCharge);
		}
		
		if (chargedDuration != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("chargedDuration: ").append(chargedDuration);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (cdrReason != null) {
			sb.append("cdrReason: ").append(cdrReason);
		}
		else {
			sb.append("cdrReason: <empty-required-field>");
		}
		
		if (teleServiceCode != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("teleServiceCode: ").append(teleServiceCode);
		}
		
		if (startOfChargingOfContext != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("startOfChargingOfContext: ").append(startOfChargingOfContext);
		}
		
		if (familyAndFriendsIndicator != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("familyAndFriendsIndicator: ").append(familyAndFriendsIndicator);
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (numberOfSDPInterrogations != null) {
			sb.append("numberOfSDPInterrogations: ").append(numberOfSDPInterrogations);
		}
		else {
			sb.append("numberOfSDPInterrogations: <empty-required-field>");
		}
		
		if (dataVolume != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dataVolume: ").append(dataVolume);
		}
		
		if (currencyType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("currencyType: ").append(currencyType);
		}
		
		if (callingPartyNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("callingPartyNumber: ").append(callingPartyNumber);
		}
		
		if (originatingLocationInfo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("originatingLocationInfo: ").append(originatingLocationInfo);
		}
		
		if (accountNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountNumber: ").append(accountNumber);
		}
		
		if (terminatingLocationInfo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("terminatingLocationInfo: ").append(terminatingLocationInfo);
		}
		
		if (calledPartyNumber != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("calledPartyNumber: ").append(calledPartyNumber);
		}
		
		if (accumulatorValueInfo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accumulatorValueInfo: ");
			accumulatorValueInfo.appendAsString(sb, indentLevel + 1);
		}
		
		if (dedicatedAccountInfo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccountInfo: ");
			dedicatedAccountInfo.appendAsString(sb, indentLevel + 1);
		}
		
		if (accountGroupID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountGroupID: ").append(accountGroupID);
		}
		
		if (serviceOfferings != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceOfferings: ").append(serviceOfferings);
		}
		
		if (communityDataInfo != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("communityDataInfo: ");
			communityDataInfo.appendAsString(sb, indentLevel + 1);
		}
		
		if (triggerTime != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("triggerTime: ").append(triggerTime);
		}
		
		if (cellID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("cellID: ").append(cellID);
		}
		
		if (locationAreaID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("locationAreaID: ").append(locationAreaID);
		}
		
		if (categorizationInformation != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("categorizationInformation: ");
			categorizationInformation.appendAsString(sb, indentLevel + 1);
		}
		
		if (ratedDurations != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("ratedDurations: ");
			ratedDurations.appendAsString(sb, indentLevel + 1);
		}
		
		if (servedIMSI != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedIMSI: ").append(servedIMSI);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

