/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class PartyInformation implements Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private AddressString msisdn = null;
	private AddressString imsi = null;
	private BerUTF8String sipUri = null;
	private BerUTF8String nai = null;
	
	public PartyInformation() {
	}

	public PartyInformation(byte[] code) {
		this.code = code;
	}

	public void setMsisdn(AddressString msisdn) {
		this.msisdn = msisdn;
	}

	public AddressString getMsisdn() {
		return msisdn;
	}

	public void setImsi(AddressString imsi) {
		this.imsi = imsi;
	}

	public AddressString getImsi() {
		return imsi;
	}

	public void setSipUri(BerUTF8String sipUri) {
		this.sipUri = sipUri;
	}

	public BerUTF8String getSipUri() {
		return sipUri;
	}

	public void setNai(BerUTF8String nai) {
		this.nai = nai;
	}

	public BerUTF8String getNai() {
		return nai;
	}

	public int encode(OutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		if (nai != null) {
			codeLength += nai.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
			return codeLength;
		}
		
		if (sipUri != null) {
			codeLength += sipUri.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
			return codeLength;
		}
		
		if (imsi != null) {
			codeLength += imsi.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
			return codeLength;
		}
		
		if (msisdn != null) {
			codeLength += msisdn.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			os.write(0x80);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			msisdn = new AddressString();
			codeLength += msisdn.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			imsi = new AddressString();
			codeLength += imsi.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			sipUri = new BerUTF8String();
			codeLength += sipUri.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			nai = new BerUTF8String();
			codeLength += nai.decode(is, false);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (msisdn != null) {
			sb.append("msisdn: ").append(msisdn);
			return;
		}

		if (imsi != null) {
			sb.append("imsi: ").append(imsi);
			return;
		}

		if (sipUri != null) {
			sb.append("sipUri: ").append(sipUri);
			return;
		}

		if (nai != null) {
			sb.append("nai: ").append(nai);
			return;
		}

		sb.append("<none>");
	}

}

