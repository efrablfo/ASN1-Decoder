/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class CommunityInformation implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private CommunityID selectedCommunityID = null;
	private CommunityIDs servedCommunityIDs = null;
	private CommunityIDs nonServedCommunityIDs = null;
	private BerBoolean nonServedCommunityIDNA = null;
	private AddressString nonServedCommunityNo = null;
	
	public CommunityInformation() {
	}

	public CommunityInformation(byte[] code) {
		this.code = code;
	}

	public void setSelectedCommunityID(CommunityID selectedCommunityID) {
		this.selectedCommunityID = selectedCommunityID;
	}

	public CommunityID getSelectedCommunityID() {
		return selectedCommunityID;
	}

	public void setServedCommunityIDs(CommunityIDs servedCommunityIDs) {
		this.servedCommunityIDs = servedCommunityIDs;
	}

	public CommunityIDs getServedCommunityIDs() {
		return servedCommunityIDs;
	}

	public void setNonServedCommunityIDs(CommunityIDs nonServedCommunityIDs) {
		this.nonServedCommunityIDs = nonServedCommunityIDs;
	}

	public CommunityIDs getNonServedCommunityIDs() {
		return nonServedCommunityIDs;
	}

	public void setNonServedCommunityIDNA(BerBoolean nonServedCommunityIDNA) {
		this.nonServedCommunityIDNA = nonServedCommunityIDNA;
	}

	public BerBoolean getNonServedCommunityIDNA() {
		return nonServedCommunityIDNA;
	}

	public void setNonServedCommunityNo(AddressString nonServedCommunityNo) {
		this.nonServedCommunityNo = nonServedCommunityNo;
	}

	public AddressString getNonServedCommunityNo() {
		return nonServedCommunityNo;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (nonServedCommunityNo != null) {
			codeLength += nonServedCommunityNo.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		if (nonServedCommunityIDNA != null) {
			codeLength += nonServedCommunityIDNA.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
		}
		
		if (nonServedCommunityIDs != null) {
			codeLength += nonServedCommunityIDs.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			os.write(0xA2);
			codeLength += 1;
		}
		
		if (servedCommunityIDs != null) {
			codeLength += servedCommunityIDs.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			os.write(0xA1);
			codeLength += 1;
		}
		
		if (selectedCommunityID != null) {
			codeLength += selectedCommunityID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 0
			os.write(0x80);
			codeLength += 1;
		}
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		if (totalLength == 0) {
			return codeLength;
		}
		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			selectedCommunityID = new CommunityID();
			subCodeLength += selectedCommunityID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			servedCommunityIDs = new CommunityIDs();
			subCodeLength += servedCommunityIDs.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			nonServedCommunityIDs = new CommunityIDs();
			subCodeLength += nonServedCommunityIDs.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			nonServedCommunityIDNA = new BerBoolean();
			subCodeLength += nonServedCommunityIDNA.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			nonServedCommunityNo = new AddressString();
			subCodeLength += nonServedCommunityNo.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		boolean firstSelectedElement = true;
		if (selectedCommunityID != null) {
			sb.append("\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("selectedCommunityID: ").append(selectedCommunityID);
			firstSelectedElement = false;
		}
		
		if (servedCommunityIDs != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("servedCommunityIDs: ");
			servedCommunityIDs.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (nonServedCommunityIDs != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonServedCommunityIDs: ");
			nonServedCommunityIDs.appendAsString(sb, indentLevel + 1);
			firstSelectedElement = false;
		}
		
		if (nonServedCommunityIDNA != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonServedCommunityIDNA: ").append(nonServedCommunityIDNA);
			firstSelectedElement = false;
		}
		
		if (nonServedCommunityNo != null) {
			if (!firstSelectedElement) {
				sb.append(",\n");
			}
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("nonServedCommunityNo: ").append(nonServedCommunityNo);
			firstSelectedElement = false;
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

