/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class ServingElement implements Serializable {

	private static final long serialVersionUID = 1L;

	public byte[] code = null;
	private OriginInfo originInfo = null;
	private AddressString mSCAddress = null;
	private GSNAddress ggsnAddress = null;
	private GSNAddress sgsnAddress = null;
	
	public ServingElement() {
	}

	public ServingElement(byte[] code) {
		this.code = code;
	}

	public void setOriginInfo(OriginInfo originInfo) {
		this.originInfo = originInfo;
	}

	public OriginInfo getOriginInfo() {
		return originInfo;
	}

	public void setMSCAddress(AddressString mSCAddress) {
		this.mSCAddress = mSCAddress;
	}

	public AddressString getMSCAddress() {
		return mSCAddress;
	}

	public void setGgsnAddress(GSNAddress ggsnAddress) {
		this.ggsnAddress = ggsnAddress;
	}

	public GSNAddress getGgsnAddress() {
		return ggsnAddress;
	}

	public void setSgsnAddress(GSNAddress sgsnAddress) {
		this.sgsnAddress = sgsnAddress;
	}

	public GSNAddress getSgsnAddress() {
		return sgsnAddress;
	}

	public int encode(OutputStream os) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (sgsnAddress != null) {
			sublength = sgsnAddress.encode(os);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			os.write(0xA3);
			codeLength += 1;
			return codeLength;
		}
		
		if (ggsnAddress != null) {
			sublength = ggsnAddress.encode(os);
			codeLength += sublength;
			codeLength += BerLength.encodeLength(os, sublength);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			os.write(0xA2);
			codeLength += 1;
			return codeLength;
		}
		
		if (mSCAddress != null) {
			codeLength += mSCAddress.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
			return codeLength;
		}
		
		if (originInfo != null) {
			codeLength += originInfo.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
			os.write(0xA0);
			codeLength += 1;
			return codeLength;
		}
		
		throw new IOException("Error encoding CHOICE: No element of CHOICE was selected.");
	}

	public int decode(InputStream is) throws IOException {
		return decode(is, null);
	}

	public int decode(InputStream is, BerTag berTag) throws IOException {

		int codeLength = 0;
		BerTag passedTag = berTag;

		if (berTag == null) {
			berTag = new BerTag();
			codeLength += berTag.decode(is);
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			originInfo = new OriginInfo();
			codeLength += originInfo.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			mSCAddress = new AddressString();
			codeLength += mSCAddress.decode(is, false);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			codeLength += BerLength.skip(is);
			ggsnAddress = new GSNAddress();
			codeLength += ggsnAddress.decode(is, null);
			return codeLength;
		}

		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			codeLength += BerLength.skip(is);
			sgsnAddress = new GSNAddress();
			codeLength += sgsnAddress.decode(is, null);
			return codeLength;
		}

		if (passedTag != null) {
			return 0;
		}

		throw new IOException("Error decoding CHOICE: Tag " + berTag + " matched to no item.");
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		if (originInfo != null) {
			sb.append("originInfo: ");
			originInfo.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (mSCAddress != null) {
			sb.append("mSCAddress: ").append(mSCAddress);
			return;
		}

		if (ggsnAddress != null) {
			sb.append("ggsnAddress: ");
			ggsnAddress.appendAsString(sb, indentLevel + 1);
			return;
		}

		if (sgsnAddress != null) {
			sb.append("sgsnAddress: ");
			sgsnAddress.appendAsString(sb, indentLevel + 1);
			return;
		}

		sb.append("<none>");
	}

}

