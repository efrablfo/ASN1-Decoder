/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class RecoveryRecord implements Serializable {

	private static final long serialVersionUID = 1L;

	public static class ServiceClassDeltaValueList implements Serializable {

		private static final long serialVersionUID = 1L;

		public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);
		public byte[] code = null;
		private List<RecoveryServiceClassInfo> seqOf = null;

		public ServiceClassDeltaValueList() {
			seqOf = new ArrayList<RecoveryServiceClassInfo>();
		}

		public ServiceClassDeltaValueList(byte[] code) {
			this.code = code;
		}

		public List<RecoveryServiceClassInfo> getRecoveryServiceClassInfo() {
			if (seqOf == null) {
				seqOf = new ArrayList<RecoveryServiceClassInfo>();
			}
			return seqOf;
		}

		public int encode(OutputStream os) throws IOException {
			return encode(os, true);
		}

		public int encode(OutputStream os, boolean withTag) throws IOException {

			if (code != null) {
				for (int i = code.length - 1; i >= 0; i--) {
					os.write(code[i]);
				}
				if (withTag) {
					return tag.encode(os) + code.length;
				}
				return code.length;
			}

			int codeLength = 0;
			for (int i = (seqOf.size() - 1); i >= 0; i--) {
				codeLength += seqOf.get(i).encode(os, true);
			}

			codeLength += BerLength.encodeLength(os, codeLength);

			if (withTag) {
				codeLength += tag.encode(os);
			}

			return codeLength;
		}

		public int decode(InputStream is) throws IOException {
			return decode(is, true);
		}

		public int decode(InputStream is, boolean withTag) throws IOException {
			int codeLength = 0;
			int subCodeLength = 0;
			if (withTag) {
				codeLength += tag.decodeAndCheck(is);
			}

			BerLength length = new BerLength();
			codeLength += length.decode(is);
			int totalLength = length.val;

			while (subCodeLength < totalLength) {
				RecoveryServiceClassInfo element = new RecoveryServiceClassInfo();
				subCodeLength += element.decode(is, true);
				seqOf.add(element);
			}
			if (subCodeLength != totalLength) {
				throw new IOException("Decoded SequenceOf or SetOf has wrong length. Expected " + totalLength + " but has " + subCodeLength);

			}
			codeLength += subCodeLength;

			return codeLength;
		}

		public void encodeAndSave(int encodingSizeGuess) throws IOException {
			ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
			encode(os, false);
			code = os.getArray();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder();
			appendAsString(sb, 0);
			return sb.toString();
		}

		public void appendAsString(StringBuilder sb, int indentLevel) {

			sb.append("{\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			if (seqOf == null) {
				sb.append("null");
			}
			else {
				Iterator<RecoveryServiceClassInfo> it = seqOf.iterator();
				if (it.hasNext()) {
					it.next().appendAsString(sb, indentLevel + 1);
					while (it.hasNext()) {
						sb.append(",\n");
						for (int i = 0; i < indentLevel + 1; i++) {
							sb.append("\t");
						}
						it.next().appendAsString(sb, indentLevel + 1);
					}
				}
			}

			sb.append("\n");
			for (int i = 0; i < indentLevel; i++) {
				sb.append("\t");
			}
			sb.append("}");
		}

	}

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private TimeStamp ccnTimeStamp = null;
	private TimeStamp accumulatorModificationDate = null;
	private RecoveryState recoveryState = null;
	private DataVolume globalDeltaVolumeUL = null;
	private DataVolume globalDeltaVolumeDL = null;
	private ServiceClassDeltaValueList serviceClassDeltaValueList = null;
	
	public RecoveryRecord() {
	}

	public RecoveryRecord(byte[] code) {
		this.code = code;
	}

	public void setCcnTimeStamp(TimeStamp ccnTimeStamp) {
		this.ccnTimeStamp = ccnTimeStamp;
	}

	public TimeStamp getCcnTimeStamp() {
		return ccnTimeStamp;
	}

	public void setAccumulatorModificationDate(TimeStamp accumulatorModificationDate) {
		this.accumulatorModificationDate = accumulatorModificationDate;
	}

	public TimeStamp getAccumulatorModificationDate() {
		return accumulatorModificationDate;
	}

	public void setRecoveryState(RecoveryState recoveryState) {
		this.recoveryState = recoveryState;
	}

	public RecoveryState getRecoveryState() {
		return recoveryState;
	}

	public void setGlobalDeltaVolumeUL(DataVolume globalDeltaVolumeUL) {
		this.globalDeltaVolumeUL = globalDeltaVolumeUL;
	}

	public DataVolume getGlobalDeltaVolumeUL() {
		return globalDeltaVolumeUL;
	}

	public void setGlobalDeltaVolumeDL(DataVolume globalDeltaVolumeDL) {
		this.globalDeltaVolumeDL = globalDeltaVolumeDL;
	}

	public DataVolume getGlobalDeltaVolumeDL() {
		return globalDeltaVolumeDL;
	}

	public void setServiceClassDeltaValueList(ServiceClassDeltaValueList serviceClassDeltaValueList) {
		this.serviceClassDeltaValueList = serviceClassDeltaValueList;
	}

	public ServiceClassDeltaValueList getServiceClassDeltaValueList() {
		return serviceClassDeltaValueList;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (serviceClassDeltaValueList != null) {
			codeLength += serviceClassDeltaValueList.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			os.write(0xA5);
			codeLength += 1;
		}
		
		if (globalDeltaVolumeDL != null) {
			codeLength += globalDeltaVolumeDL.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		if (globalDeltaVolumeUL != null) {
			codeLength += globalDeltaVolumeUL.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
		}
		
		codeLength += recoveryState.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 2
		os.write(0x82);
		codeLength += 1;
		
		codeLength += accumulatorModificationDate.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		os.write(0x81);
		codeLength += 1;
		
		codeLength += ccnTimeStamp.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			ccnTimeStamp = new TimeStamp();
			subCodeLength += ccnTimeStamp.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			accumulatorModificationDate = new TimeStamp();
			subCodeLength += accumulatorModificationDate.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			recoveryState = new RecoveryState();
			subCodeLength += recoveryState.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			globalDeltaVolumeUL = new DataVolume();
			subCodeLength += globalDeltaVolumeUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			globalDeltaVolumeDL = new DataVolume();
			subCodeLength += globalDeltaVolumeDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			serviceClassDeltaValueList = new ServiceClassDeltaValueList();
			subCodeLength += serviceClassDeltaValueList.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (ccnTimeStamp != null) {
			sb.append("ccnTimeStamp: ").append(ccnTimeStamp);
		}
		else {
			sb.append("ccnTimeStamp: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accumulatorModificationDate != null) {
			sb.append("accumulatorModificationDate: ").append(accumulatorModificationDate);
		}
		else {
			sb.append("accumulatorModificationDate: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (recoveryState != null) {
			sb.append("recoveryState: ").append(recoveryState);
		}
		else {
			sb.append("recoveryState: <empty-required-field>");
		}
		
		if (globalDeltaVolumeUL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("globalDeltaVolumeUL: ").append(globalDeltaVolumeUL);
		}
		
		if (globalDeltaVolumeDL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("globalDeltaVolumeDL: ").append(globalDeltaVolumeDL);
		}
		
		if (serviceClassDeltaValueList != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("serviceClassDeltaValueList: ");
			serviceClassDeltaValueList.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

