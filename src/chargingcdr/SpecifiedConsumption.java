/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class SpecifiedConsumption implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private SelectionTreeQualifiers selectionTreeQualifiers = null;
	private SpecifiedConsumptionAccounts specifiedConsumptionAccounts = null;
	private OfferID offerID = null;
	private IndividualPriceFactorHistory individualPriceFactorAtUnit = null;
	private ServiceUnits terminationAtUnit = null;
	private ServiceUnits eligibleOfferAtUnit = null;
	private AddressString offerProviderID = null;
	private ProductID productID = null;
	private OfferAttributes offerAttributes = null;
	private PriceFactor priceFactorAtUnit = null;
	
	public SpecifiedConsumption() {
	}

	public SpecifiedConsumption(byte[] code) {
		this.code = code;
	}

	public void setSelectionTreeQualifiers(SelectionTreeQualifiers selectionTreeQualifiers) {
		this.selectionTreeQualifiers = selectionTreeQualifiers;
	}

	public SelectionTreeQualifiers getSelectionTreeQualifiers() {
		return selectionTreeQualifiers;
	}

	public void setSpecifiedConsumptionAccounts(SpecifiedConsumptionAccounts specifiedConsumptionAccounts) {
		this.specifiedConsumptionAccounts = specifiedConsumptionAccounts;
	}

	public SpecifiedConsumptionAccounts getSpecifiedConsumptionAccounts() {
		return specifiedConsumptionAccounts;
	}

	public void setOfferID(OfferID offerID) {
		this.offerID = offerID;
	}

	public OfferID getOfferID() {
		return offerID;
	}

	public void setIndividualPriceFactorAtUnit(IndividualPriceFactorHistory individualPriceFactorAtUnit) {
		this.individualPriceFactorAtUnit = individualPriceFactorAtUnit;
	}

	public IndividualPriceFactorHistory getIndividualPriceFactorAtUnit() {
		return individualPriceFactorAtUnit;
	}

	public void setTerminationAtUnit(ServiceUnits terminationAtUnit) {
		this.terminationAtUnit = terminationAtUnit;
	}

	public ServiceUnits getTerminationAtUnit() {
		return terminationAtUnit;
	}

	public void setEligibleOfferAtUnit(ServiceUnits eligibleOfferAtUnit) {
		this.eligibleOfferAtUnit = eligibleOfferAtUnit;
	}

	public ServiceUnits getEligibleOfferAtUnit() {
		return eligibleOfferAtUnit;
	}

	public void setOfferProviderID(AddressString offerProviderID) {
		this.offerProviderID = offerProviderID;
	}

	public AddressString getOfferProviderID() {
		return offerProviderID;
	}

	public void setProductID(ProductID productID) {
		this.productID = productID;
	}

	public ProductID getProductID() {
		return productID;
	}

	public void setOfferAttributes(OfferAttributes offerAttributes) {
		this.offerAttributes = offerAttributes;
	}

	public OfferAttributes getOfferAttributes() {
		return offerAttributes;
	}

	public void setPriceFactorAtUnit(PriceFactor priceFactorAtUnit) {
		this.priceFactorAtUnit = priceFactorAtUnit;
	}

	public PriceFactor getPriceFactorAtUnit() {
		return priceFactorAtUnit;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (priceFactorAtUnit != null) {
			codeLength += priceFactorAtUnit.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 10
			os.write(0xAA);
			codeLength += 1;
		}
		
		if (offerAttributes != null) {
			codeLength += offerAttributes.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 8
			os.write(0xA8);
			codeLength += 1;
		}
		
		if (productID != null) {
			codeLength += productID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			os.write(0x87);
			codeLength += 1;
		}
		
		if (offerProviderID != null) {
			codeLength += offerProviderID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			os.write(0x86);
			codeLength += 1;
		}
		
		if (eligibleOfferAtUnit != null) {
			codeLength += eligibleOfferAtUnit.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			os.write(0xA5);
			codeLength += 1;
		}
		
		if (terminationAtUnit != null) {
			codeLength += terminationAtUnit.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			os.write(0xA4);
			codeLength += 1;
		}
		
		if (individualPriceFactorAtUnit != null) {
			codeLength += individualPriceFactorAtUnit.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			os.write(0xA3);
			codeLength += 1;
		}
		
		if (offerID != null) {
			codeLength += offerID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		codeLength += specifiedConsumptionAccounts.encode(os, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		os.write(0xA1);
		codeLength += 1;
		
		codeLength += selectionTreeQualifiers.encode(os, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 0
		os.write(0xA0);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 0)) {
			selectionTreeQualifiers = new SelectionTreeQualifiers();
			subCodeLength += selectionTreeQualifiers.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			specifiedConsumptionAccounts = new SpecifiedConsumptionAccounts();
			subCodeLength += specifiedConsumptionAccounts.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			offerID = new OfferID();
			subCodeLength += offerID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			individualPriceFactorAtUnit = new IndividualPriceFactorHistory();
			subCodeLength += individualPriceFactorAtUnit.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			terminationAtUnit = new ServiceUnits();
			subCodeLength += terminationAtUnit.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			eligibleOfferAtUnit = new ServiceUnits();
			subCodeLength += eligibleOfferAtUnit.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			offerProviderID = new AddressString();
			subCodeLength += offerProviderID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			productID = new ProductID();
			subCodeLength += productID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 8)) {
			offerAttributes = new OfferAttributes();
			subCodeLength += offerAttributes.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 10)) {
			priceFactorAtUnit = new PriceFactor();
			subCodeLength += priceFactorAtUnit.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (selectionTreeQualifiers != null) {
			sb.append("selectionTreeQualifiers: ");
			selectionTreeQualifiers.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("selectionTreeQualifiers: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (specifiedConsumptionAccounts != null) {
			sb.append("specifiedConsumptionAccounts: ");
			specifiedConsumptionAccounts.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("specifiedConsumptionAccounts: <empty-required-field>");
		}
		
		if (offerID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("offerID: ").append(offerID);
		}
		
		if (individualPriceFactorAtUnit != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("individualPriceFactorAtUnit: ");
			individualPriceFactorAtUnit.appendAsString(sb, indentLevel + 1);
		}
		
		if (terminationAtUnit != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("terminationAtUnit: ");
			terminationAtUnit.appendAsString(sb, indentLevel + 1);
		}
		
		if (eligibleOfferAtUnit != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("eligibleOfferAtUnit: ");
			eligibleOfferAtUnit.appendAsString(sb, indentLevel + 1);
		}
		
		if (offerProviderID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("offerProviderID: ").append(offerProviderID);
		}
		
		if (productID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("productID: ").append(productID);
		}
		
		if (offerAttributes != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("offerAttributes: ");
			offerAttributes.appendAsString(sb, indentLevel + 1);
		}
		
		if (priceFactorAtUnit != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("priceFactorAtUnit: ");
			priceFactorAtUnit.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

