/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class AppliedProductFee implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private OfferID offerID = null;
	private ProductID productID = null;
	private MonetaryUnits productFee = null;
	private MonetaryUnits accountValueChange = null;
	private MonetaryUnits accountValueAfter = null;
	private ProductFeeDedicatedAccounts productFeeDedicatedAccounts = null;
	private ProductFeeUsageCounters productFeeUsageCounters = null;
	
	public AppliedProductFee() {
	}

	public AppliedProductFee(byte[] code) {
		this.code = code;
	}

	public void setOfferID(OfferID offerID) {
		this.offerID = offerID;
	}

	public OfferID getOfferID() {
		return offerID;
	}

	public void setProductID(ProductID productID) {
		this.productID = productID;
	}

	public ProductID getProductID() {
		return productID;
	}

	public void setProductFee(MonetaryUnits productFee) {
		this.productFee = productFee;
	}

	public MonetaryUnits getProductFee() {
		return productFee;
	}

	public void setAccountValueChange(MonetaryUnits accountValueChange) {
		this.accountValueChange = accountValueChange;
	}

	public MonetaryUnits getAccountValueChange() {
		return accountValueChange;
	}

	public void setAccountValueAfter(MonetaryUnits accountValueAfter) {
		this.accountValueAfter = accountValueAfter;
	}

	public MonetaryUnits getAccountValueAfter() {
		return accountValueAfter;
	}

	public void setProductFeeDedicatedAccounts(ProductFeeDedicatedAccounts productFeeDedicatedAccounts) {
		this.productFeeDedicatedAccounts = productFeeDedicatedAccounts;
	}

	public ProductFeeDedicatedAccounts getProductFeeDedicatedAccounts() {
		return productFeeDedicatedAccounts;
	}

	public void setProductFeeUsageCounters(ProductFeeUsageCounters productFeeUsageCounters) {
		this.productFeeUsageCounters = productFeeUsageCounters;
	}

	public ProductFeeUsageCounters getProductFeeUsageCounters() {
		return productFeeUsageCounters;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (productFeeUsageCounters != null) {
			codeLength += productFeeUsageCounters.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 6
			os.write(0xA6);
			codeLength += 1;
		}
		
		if (productFeeDedicatedAccounts != null) {
			codeLength += productFeeDedicatedAccounts.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 5
			os.write(0xA5);
			codeLength += 1;
		}
		
		if (accountValueAfter != null) {
			codeLength += accountValueAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			os.write(0xA4);
			codeLength += 1;
		}
		
		if (accountValueChange != null) {
			codeLength += accountValueChange.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			os.write(0xA3);
			codeLength += 1;
		}
		
		if (productFee != null) {
			codeLength += productFee.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			os.write(0xA2);
			codeLength += 1;
		}
		
		codeLength += productID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 1
		os.write(0x81);
		codeLength += 1;
		
		codeLength += offerID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			offerID = new OfferID();
			subCodeLength += offerID.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			productID = new ProductID();
			subCodeLength += productID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			productFee = new MonetaryUnits();
			subCodeLength += productFee.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			accountValueChange = new MonetaryUnits();
			subCodeLength += accountValueChange.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			accountValueAfter = new MonetaryUnits();
			subCodeLength += accountValueAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 5)) {
			productFeeDedicatedAccounts = new ProductFeeDedicatedAccounts();
			subCodeLength += productFeeDedicatedAccounts.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 6)) {
			productFeeUsageCounters = new ProductFeeUsageCounters();
			subCodeLength += productFeeUsageCounters.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (offerID != null) {
			sb.append("offerID: ").append(offerID);
		}
		else {
			sb.append("offerID: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (productID != null) {
			sb.append("productID: ").append(productID);
		}
		else {
			sb.append("productID: <empty-required-field>");
		}
		
		if (productFee != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("productFee: ");
			productFee.appendAsString(sb, indentLevel + 1);
		}
		
		if (accountValueChange != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountValueChange: ");
			accountValueChange.appendAsString(sb, indentLevel + 1);
		}
		
		if (accountValueAfter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountValueAfter: ");
			accountValueAfter.appendAsString(sb, indentLevel + 1);
		}
		
		if (productFeeDedicatedAccounts != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("productFeeDedicatedAccounts: ");
			productFeeDedicatedAccounts.appendAsString(sb, indentLevel + 1);
		}
		
		if (productFeeUsageCounters != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("productFeeUsageCounters: ");
			productFeeUsageCounters.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

