/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class SpecifiedConsumptionPerAccount implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private ServiceUnits units = null;
	private AccountSpecifiedConsumption accountSpecifiedConsumption = null;
	private AccumulatorSpecifiedConsumptions accumulatorSpecifiedConsumptions = null;
	private UsageCounterSpecifiedConsumptions usageCounterSpecifiedConsumptions = null;
	
	public SpecifiedConsumptionPerAccount() {
	}

	public SpecifiedConsumptionPerAccount(byte[] code) {
		this.code = code;
	}

	public void setUnits(ServiceUnits units) {
		this.units = units;
	}

	public ServiceUnits getUnits() {
		return units;
	}

	public void setAccountSpecifiedConsumption(AccountSpecifiedConsumption accountSpecifiedConsumption) {
		this.accountSpecifiedConsumption = accountSpecifiedConsumption;
	}

	public AccountSpecifiedConsumption getAccountSpecifiedConsumption() {
		return accountSpecifiedConsumption;
	}

	public void setAccumulatorSpecifiedConsumptions(AccumulatorSpecifiedConsumptions accumulatorSpecifiedConsumptions) {
		this.accumulatorSpecifiedConsumptions = accumulatorSpecifiedConsumptions;
	}

	public AccumulatorSpecifiedConsumptions getAccumulatorSpecifiedConsumptions() {
		return accumulatorSpecifiedConsumptions;
	}

	public void setUsageCounterSpecifiedConsumptions(UsageCounterSpecifiedConsumptions usageCounterSpecifiedConsumptions) {
		this.usageCounterSpecifiedConsumptions = usageCounterSpecifiedConsumptions;
	}

	public UsageCounterSpecifiedConsumptions getUsageCounterSpecifiedConsumptions() {
		return usageCounterSpecifiedConsumptions;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		int sublength;

		if (usageCounterSpecifiedConsumptions != null) {
			codeLength += usageCounterSpecifiedConsumptions.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 4
			os.write(0xA4);
			codeLength += 1;
		}
		
		if (accumulatorSpecifiedConsumptions != null) {
			codeLength += accumulatorSpecifiedConsumptions.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			os.write(0xA3);
			codeLength += 1;
		}
		
		sublength = accountSpecifiedConsumption.encode(os);
		codeLength += sublength;
		codeLength += BerLength.encodeLength(os, sublength);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
		os.write(0xA2);
		codeLength += 1;
		
		codeLength += units.encode(os, false);
		// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
		os.write(0xA1);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			units = new ServiceUnits();
			subCodeLength += units.decode(is, false);
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			subCodeLength += length.decode(is);
			accountSpecifiedConsumption = new AccountSpecifiedConsumption();
			subCodeLength += accountSpecifiedConsumption.decode(is, null);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			accumulatorSpecifiedConsumptions = new AccumulatorSpecifiedConsumptions();
			subCodeLength += accumulatorSpecifiedConsumptions.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 4)) {
			usageCounterSpecifiedConsumptions = new UsageCounterSpecifiedConsumptions();
			subCodeLength += usageCounterSpecifiedConsumptions.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (units != null) {
			sb.append("units: ");
			units.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("units: <empty-required-field>");
		}
		
		sb.append(",\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (accountSpecifiedConsumption != null) {
			sb.append("accountSpecifiedConsumption: ");
			accountSpecifiedConsumption.appendAsString(sb, indentLevel + 1);
		}
		else {
			sb.append("accountSpecifiedConsumption: <empty-required-field>");
		}
		
		if (accumulatorSpecifiedConsumptions != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accumulatorSpecifiedConsumptions: ");
			accumulatorSpecifiedConsumptions.appendAsString(sb, indentLevel + 1);
		}
		
		if (usageCounterSpecifiedConsumptions != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("usageCounterSpecifiedConsumptions: ");
			usageCounterSpecifiedConsumptions.appendAsString(sb, indentLevel + 1);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

