/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class DedicatedAccount implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private DedicatedAccountID dedicatedAccountID = null;
	private MonetaryUnits dedicatedAccountValueBefore = null;
	private MonetaryUnits dedicatedAccountValueAfter = null;
	private MonetaryUnits dedicatedAccountChange = null;
	private DedicatedAccountCampaignID dedicatedAccountCampaignID = null;
	private Date accountExpiryDateBefore = null;
	private Date accountExpiryDateAfter = null;
	private Date accountStartDateBefore = null;
	private Date accountStartDateAfter = null;
	private BerBoolean realMoney = null;
	private OfferID offerID = null;
	private Unsigned64 dedicatedAccountUnitsBefore = null;
	private Unsigned64 dedicatedAccountUnitsAfter = null;
	private Integer64 dedicatedAccountUnitsChange = null;
	private AccountUnitType accountUnitType = null;
	private SubDedicatedAccounts subDedicatedAccounts = null;
	private ProductID productID = null;
	private Date offerExpiryDate = null;
	private Date offerStartDate = null;
	
	public DedicatedAccount() {
	}

	public DedicatedAccount(byte[] code) {
		this.code = code;
	}

	public void setDedicatedAccountID(DedicatedAccountID dedicatedAccountID) {
		this.dedicatedAccountID = dedicatedAccountID;
	}

	public DedicatedAccountID getDedicatedAccountID() {
		return dedicatedAccountID;
	}

	public void setDedicatedAccountValueBefore(MonetaryUnits dedicatedAccountValueBefore) {
		this.dedicatedAccountValueBefore = dedicatedAccountValueBefore;
	}

	public MonetaryUnits getDedicatedAccountValueBefore() {
		return dedicatedAccountValueBefore;
	}

	public void setDedicatedAccountValueAfter(MonetaryUnits dedicatedAccountValueAfter) {
		this.dedicatedAccountValueAfter = dedicatedAccountValueAfter;
	}

	public MonetaryUnits getDedicatedAccountValueAfter() {
		return dedicatedAccountValueAfter;
	}

	public void setDedicatedAccountChange(MonetaryUnits dedicatedAccountChange) {
		this.dedicatedAccountChange = dedicatedAccountChange;
	}

	public MonetaryUnits getDedicatedAccountChange() {
		return dedicatedAccountChange;
	}

	public void setDedicatedAccountCampaignID(DedicatedAccountCampaignID dedicatedAccountCampaignID) {
		this.dedicatedAccountCampaignID = dedicatedAccountCampaignID;
	}

	public DedicatedAccountCampaignID getDedicatedAccountCampaignID() {
		return dedicatedAccountCampaignID;
	}

	public void setAccountExpiryDateBefore(Date accountExpiryDateBefore) {
		this.accountExpiryDateBefore = accountExpiryDateBefore;
	}

	public Date getAccountExpiryDateBefore() {
		return accountExpiryDateBefore;
	}

	public void setAccountExpiryDateAfter(Date accountExpiryDateAfter) {
		this.accountExpiryDateAfter = accountExpiryDateAfter;
	}

	public Date getAccountExpiryDateAfter() {
		return accountExpiryDateAfter;
	}

	public void setAccountStartDateBefore(Date accountStartDateBefore) {
		this.accountStartDateBefore = accountStartDateBefore;
	}

	public Date getAccountStartDateBefore() {
		return accountStartDateBefore;
	}

	public void setAccountStartDateAfter(Date accountStartDateAfter) {
		this.accountStartDateAfter = accountStartDateAfter;
	}

	public Date getAccountStartDateAfter() {
		return accountStartDateAfter;
	}

	public void setRealMoney(BerBoolean realMoney) {
		this.realMoney = realMoney;
	}

	public BerBoolean getRealMoney() {
		return realMoney;
	}

	public void setOfferID(OfferID offerID) {
		this.offerID = offerID;
	}

	public OfferID getOfferID() {
		return offerID;
	}

	public void setDedicatedAccountUnitsBefore(Unsigned64 dedicatedAccountUnitsBefore) {
		this.dedicatedAccountUnitsBefore = dedicatedAccountUnitsBefore;
	}

	public Unsigned64 getDedicatedAccountUnitsBefore() {
		return dedicatedAccountUnitsBefore;
	}

	public void setDedicatedAccountUnitsAfter(Unsigned64 dedicatedAccountUnitsAfter) {
		this.dedicatedAccountUnitsAfter = dedicatedAccountUnitsAfter;
	}

	public Unsigned64 getDedicatedAccountUnitsAfter() {
		return dedicatedAccountUnitsAfter;
	}

	public void setDedicatedAccountUnitsChange(Integer64 dedicatedAccountUnitsChange) {
		this.dedicatedAccountUnitsChange = dedicatedAccountUnitsChange;
	}

	public Integer64 getDedicatedAccountUnitsChange() {
		return dedicatedAccountUnitsChange;
	}

	public void setAccountUnitType(AccountUnitType accountUnitType) {
		this.accountUnitType = accountUnitType;
	}

	public AccountUnitType getAccountUnitType() {
		return accountUnitType;
	}

	public void setSubDedicatedAccounts(SubDedicatedAccounts subDedicatedAccounts) {
		this.subDedicatedAccounts = subDedicatedAccounts;
	}

	public SubDedicatedAccounts getSubDedicatedAccounts() {
		return subDedicatedAccounts;
	}

	public void setProductID(ProductID productID) {
		this.productID = productID;
	}

	public ProductID getProductID() {
		return productID;
	}

	public void setOfferExpiryDate(Date offerExpiryDate) {
		this.offerExpiryDate = offerExpiryDate;
	}

	public Date getOfferExpiryDate() {
		return offerExpiryDate;
	}

	public void setOfferStartDate(Date offerStartDate) {
		this.offerStartDate = offerStartDate;
	}

	public Date getOfferStartDate() {
		return offerStartDate;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (offerStartDate != null) {
			codeLength += offerStartDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 18
			os.write(0x92);
			codeLength += 1;
		}
		
		if (offerExpiryDate != null) {
			codeLength += offerExpiryDate.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 17
			os.write(0x91);
			codeLength += 1;
		}
		
		if (productID != null) {
			codeLength += productID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 16
			os.write(0x90);
			codeLength += 1;
		}
		
		if (subDedicatedAccounts != null) {
			codeLength += subDedicatedAccounts.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 15
			os.write(0xAF);
			codeLength += 1;
		}
		
		if (accountUnitType != null) {
			codeLength += accountUnitType.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 14
			os.write(0x8E);
			codeLength += 1;
		}
		
		if (dedicatedAccountUnitsChange != null) {
			codeLength += dedicatedAccountUnitsChange.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 13
			os.write(0x8D);
			codeLength += 1;
		}
		
		if (dedicatedAccountUnitsAfter != null) {
			codeLength += dedicatedAccountUnitsAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 12
			os.write(0x8C);
			codeLength += 1;
		}
		
		if (dedicatedAccountUnitsBefore != null) {
			codeLength += dedicatedAccountUnitsBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 11
			os.write(0x8B);
			codeLength += 1;
		}
		
		if (offerID != null) {
			codeLength += offerID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 10
			os.write(0x8A);
			codeLength += 1;
		}
		
		if (realMoney != null) {
			codeLength += realMoney.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 9
			os.write(0x89);
			codeLength += 1;
		}
		
		if (accountStartDateAfter != null) {
			codeLength += accountStartDateAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 8
			os.write(0x88);
			codeLength += 1;
		}
		
		if (accountStartDateBefore != null) {
			codeLength += accountStartDateBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 7
			os.write(0x87);
			codeLength += 1;
		}
		
		if (accountExpiryDateAfter != null) {
			codeLength += accountExpiryDateAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			os.write(0x86);
			codeLength += 1;
		}
		
		if (accountExpiryDateBefore != null) {
			codeLength += accountExpiryDateBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			os.write(0x85);
			codeLength += 1;
		}
		
		if (dedicatedAccountCampaignID != null) {
			codeLength += dedicatedAccountCampaignID.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		if (dedicatedAccountChange != null) {
			codeLength += dedicatedAccountChange.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 3
			os.write(0xA3);
			codeLength += 1;
		}
		
		if (dedicatedAccountValueAfter != null) {
			codeLength += dedicatedAccountValueAfter.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 2
			os.write(0xA2);
			codeLength += 1;
		}
		
		if (dedicatedAccountValueBefore != null) {
			codeLength += dedicatedAccountValueBefore.encode(os, false);
			// write tag: CONTEXT_CLASS, CONSTRUCTED, 1
			os.write(0xA1);
			codeLength += 1;
		}
		
		codeLength += dedicatedAccountID.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			dedicatedAccountID = new DedicatedAccountID();
			subCodeLength += dedicatedAccountID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 1)) {
			dedicatedAccountValueBefore = new MonetaryUnits();
			subCodeLength += dedicatedAccountValueBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 2)) {
			dedicatedAccountValueAfter = new MonetaryUnits();
			subCodeLength += dedicatedAccountValueAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 3)) {
			dedicatedAccountChange = new MonetaryUnits();
			subCodeLength += dedicatedAccountChange.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			dedicatedAccountCampaignID = new DedicatedAccountCampaignID();
			subCodeLength += dedicatedAccountCampaignID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			accountExpiryDateBefore = new Date();
			subCodeLength += accountExpiryDateBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			accountExpiryDateAfter = new Date();
			subCodeLength += accountExpiryDateAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 7)) {
			accountStartDateBefore = new Date();
			subCodeLength += accountStartDateBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 8)) {
			accountStartDateAfter = new Date();
			subCodeLength += accountStartDateAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 9)) {
			realMoney = new BerBoolean();
			subCodeLength += realMoney.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 10)) {
			offerID = new OfferID();
			subCodeLength += offerID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 11)) {
			dedicatedAccountUnitsBefore = new Unsigned64();
			subCodeLength += dedicatedAccountUnitsBefore.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 12)) {
			dedicatedAccountUnitsAfter = new Unsigned64();
			subCodeLength += dedicatedAccountUnitsAfter.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 13)) {
			dedicatedAccountUnitsChange = new Integer64();
			subCodeLength += dedicatedAccountUnitsChange.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 14)) {
			accountUnitType = new AccountUnitType();
			subCodeLength += accountUnitType.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.CONSTRUCTED, 15)) {
			subDedicatedAccounts = new SubDedicatedAccounts();
			subCodeLength += subDedicatedAccounts.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 16)) {
			productID = new ProductID();
			subCodeLength += productID.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 17)) {
			offerExpiryDate = new Date();
			subCodeLength += offerExpiryDate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 18)) {
			offerStartDate = new Date();
			subCodeLength += offerStartDate.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (dedicatedAccountID != null) {
			sb.append("dedicatedAccountID: ").append(dedicatedAccountID);
		}
		else {
			sb.append("dedicatedAccountID: <empty-required-field>");
		}
		
		if (dedicatedAccountValueBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccountValueBefore: ");
			dedicatedAccountValueBefore.appendAsString(sb, indentLevel + 1);
		}
		
		if (dedicatedAccountValueAfter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccountValueAfter: ");
			dedicatedAccountValueAfter.appendAsString(sb, indentLevel + 1);
		}
		
		if (dedicatedAccountChange != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccountChange: ");
			dedicatedAccountChange.appendAsString(sb, indentLevel + 1);
		}
		
		if (dedicatedAccountCampaignID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccountCampaignID: ").append(dedicatedAccountCampaignID);
		}
		
		if (accountExpiryDateBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountExpiryDateBefore: ").append(accountExpiryDateBefore);
		}
		
		if (accountExpiryDateAfter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountExpiryDateAfter: ").append(accountExpiryDateAfter);
		}
		
		if (accountStartDateBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountStartDateBefore: ").append(accountStartDateBefore);
		}
		
		if (accountStartDateAfter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountStartDateAfter: ").append(accountStartDateAfter);
		}
		
		if (realMoney != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("realMoney: ").append(realMoney);
		}
		
		if (offerID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("offerID: ").append(offerID);
		}
		
		if (dedicatedAccountUnitsBefore != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccountUnitsBefore: ").append(dedicatedAccountUnitsBefore);
		}
		
		if (dedicatedAccountUnitsAfter != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccountUnitsAfter: ").append(dedicatedAccountUnitsAfter);
		}
		
		if (dedicatedAccountUnitsChange != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("dedicatedAccountUnitsChange: ").append(dedicatedAccountUnitsChange);
		}
		
		if (accountUnitType != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("accountUnitType: ").append(accountUnitType);
		}
		
		if (subDedicatedAccounts != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("subDedicatedAccounts: ");
			subDedicatedAccounts.appendAsString(sb, indentLevel + 1);
		}
		
		if (productID != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("productID: ").append(productID);
		}
		
		if (offerExpiryDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("offerExpiryDate: ").append(offerExpiryDate);
		}
		
		if (offerStartDate != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("offerStartDate: ").append(offerStartDate);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

