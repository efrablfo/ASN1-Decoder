/**
 * This class file was automatically generated by jASN1 v1.9.0 (http://www.openmuc.org)
 */

package chargingcdr;

import java.io.IOException;
import java.io.EOFException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.io.Serializable;
import org.openmuc.jasn1.ber.*;
import org.openmuc.jasn1.ber.types.*;
import org.openmuc.jasn1.ber.types.string.*;


public class AuthorizedQoS implements Serializable {

	private static final long serialVersionUID = 1L;

	public static final BerTag tag = new BerTag(BerTag.UNIVERSAL_CLASS, BerTag.CONSTRUCTED, 16);

	public byte[] code = null;
	private TimeStamp triggerTime = null;
	private QoSClassIdentifier qoSClassIdentifier = null;
	private Unsigned32 maxRequestedBandwidthUL = null;
	private Unsigned32 maxRequestedBandwidthDL = null;
	private PriorityLevel priorityLevel = null;
	private BerBoolean preEmptionCapability = null;
	private BerBoolean preEmptionVulnerability = null;
	
	public AuthorizedQoS() {
	}

	public AuthorizedQoS(byte[] code) {
		this.code = code;
	}

	public void setTriggerTime(TimeStamp triggerTime) {
		this.triggerTime = triggerTime;
	}

	public TimeStamp getTriggerTime() {
		return triggerTime;
	}

	public void setQoSClassIdentifier(QoSClassIdentifier qoSClassIdentifier) {
		this.qoSClassIdentifier = qoSClassIdentifier;
	}

	public QoSClassIdentifier getQoSClassIdentifier() {
		return qoSClassIdentifier;
	}

	public void setMaxRequestedBandwidthUL(Unsigned32 maxRequestedBandwidthUL) {
		this.maxRequestedBandwidthUL = maxRequestedBandwidthUL;
	}

	public Unsigned32 getMaxRequestedBandwidthUL() {
		return maxRequestedBandwidthUL;
	}

	public void setMaxRequestedBandwidthDL(Unsigned32 maxRequestedBandwidthDL) {
		this.maxRequestedBandwidthDL = maxRequestedBandwidthDL;
	}

	public Unsigned32 getMaxRequestedBandwidthDL() {
		return maxRequestedBandwidthDL;
	}

	public void setPriorityLevel(PriorityLevel priorityLevel) {
		this.priorityLevel = priorityLevel;
	}

	public PriorityLevel getPriorityLevel() {
		return priorityLevel;
	}

	public void setPreEmptionCapability(BerBoolean preEmptionCapability) {
		this.preEmptionCapability = preEmptionCapability;
	}

	public BerBoolean getPreEmptionCapability() {
		return preEmptionCapability;
	}

	public void setPreEmptionVulnerability(BerBoolean preEmptionVulnerability) {
		this.preEmptionVulnerability = preEmptionVulnerability;
	}

	public BerBoolean getPreEmptionVulnerability() {
		return preEmptionVulnerability;
	}

	public int encode(OutputStream os) throws IOException {
		return encode(os, true);
	}

	public int encode(OutputStream os, boolean withTag) throws IOException {

		if (code != null) {
			for (int i = code.length - 1; i >= 0; i--) {
				os.write(code[i]);
			}
			if (withTag) {
				return tag.encode(os) + code.length;
			}
			return code.length;
		}

		int codeLength = 0;
		if (preEmptionVulnerability != null) {
			codeLength += preEmptionVulnerability.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 6
			os.write(0x86);
			codeLength += 1;
		}
		
		if (preEmptionCapability != null) {
			codeLength += preEmptionCapability.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 5
			os.write(0x85);
			codeLength += 1;
		}
		
		if (priorityLevel != null) {
			codeLength += priorityLevel.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 4
			os.write(0x84);
			codeLength += 1;
		}
		
		if (maxRequestedBandwidthDL != null) {
			codeLength += maxRequestedBandwidthDL.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 3
			os.write(0x83);
			codeLength += 1;
		}
		
		if (maxRequestedBandwidthUL != null) {
			codeLength += maxRequestedBandwidthUL.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 2
			os.write(0x82);
			codeLength += 1;
		}
		
		if (qoSClassIdentifier != null) {
			codeLength += qoSClassIdentifier.encode(os, false);
			// write tag: CONTEXT_CLASS, PRIMITIVE, 1
			os.write(0x81);
			codeLength += 1;
		}
		
		codeLength += triggerTime.encode(os, false);
		// write tag: CONTEXT_CLASS, PRIMITIVE, 0
		os.write(0x80);
		codeLength += 1;
		
		codeLength += BerLength.encodeLength(os, codeLength);

		if (withTag) {
			codeLength += tag.encode(os);
		}

		return codeLength;

	}

	public int decode(InputStream is) throws IOException {
		return decode(is, true);
	}

	public int decode(InputStream is, boolean withTag) throws IOException {
		int codeLength = 0;
		int subCodeLength = 0;
		BerTag berTag = new BerTag();

		if (withTag) {
			codeLength += tag.decodeAndCheck(is);
		}

		BerLength length = new BerLength();
		codeLength += length.decode(is);

		int totalLength = length.val;
		codeLength += totalLength;

		subCodeLength += berTag.decode(is);
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 0)) {
			triggerTime = new TimeStamp();
			subCodeLength += triggerTime.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		else {
			throw new IOException("Tag does not match the mandatory sequence element tag.");
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 1)) {
			qoSClassIdentifier = new QoSClassIdentifier();
			subCodeLength += qoSClassIdentifier.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 2)) {
			maxRequestedBandwidthUL = new Unsigned32();
			subCodeLength += maxRequestedBandwidthUL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 3)) {
			maxRequestedBandwidthDL = new Unsigned32();
			subCodeLength += maxRequestedBandwidthDL.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 4)) {
			priorityLevel = new PriorityLevel();
			subCodeLength += priorityLevel.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 5)) {
			preEmptionCapability = new BerBoolean();
			subCodeLength += preEmptionCapability.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
			subCodeLength += berTag.decode(is);
		}
		
		if (berTag.equals(BerTag.CONTEXT_CLASS, BerTag.PRIMITIVE, 6)) {
			preEmptionVulnerability = new BerBoolean();
			subCodeLength += preEmptionVulnerability.decode(is, false);
			if (subCodeLength == totalLength) {
				return codeLength;
			}
		}
		throw new IOException("Unexpected end of sequence, length tag: " + totalLength + ", actual sequence length: " + subCodeLength);

		
	}

	public void encodeAndSave(int encodingSizeGuess) throws IOException {
		ReverseByteArrayOutputStream os = new ReverseByteArrayOutputStream(encodingSizeGuess);
		encode(os, false);
		code = os.getArray();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		appendAsString(sb, 0);
		return sb.toString();
	}

	public void appendAsString(StringBuilder sb, int indentLevel) {

		sb.append("{");
		sb.append("\n");
		for (int i = 0; i < indentLevel + 1; i++) {
			sb.append("\t");
		}
		if (triggerTime != null) {
			sb.append("triggerTime: ").append(triggerTime);
		}
		else {
			sb.append("triggerTime: <empty-required-field>");
		}
		
		if (qoSClassIdentifier != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("qoSClassIdentifier: ").append(qoSClassIdentifier);
		}
		
		if (maxRequestedBandwidthUL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxRequestedBandwidthUL: ").append(maxRequestedBandwidthUL);
		}
		
		if (maxRequestedBandwidthDL != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("maxRequestedBandwidthDL: ").append(maxRequestedBandwidthDL);
		}
		
		if (priorityLevel != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("priorityLevel: ").append(priorityLevel);
		}
		
		if (preEmptionCapability != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("preEmptionCapability: ").append(preEmptionCapability);
		}
		
		if (preEmptionVulnerability != null) {
			sb.append(",\n");
			for (int i = 0; i < indentLevel + 1; i++) {
				sb.append("\t");
			}
			sb.append("preEmptionVulnerability: ").append(preEmptionVulnerability);
		}
		
		sb.append("\n");
		for (int i = 0; i < indentLevel; i++) {
			sb.append("\t");
		}
		sb.append("}");
	}

}

